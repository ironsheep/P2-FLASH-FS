 =================================================================================================
   File....... flash_fs.spin2
   Purpose.... This object is the full flash file system driver for the P2
               it manages all but the first 512KB of the flash chip (where the boot image is stored)
               it provides a standard (ANSI C like) file system interface to the flash chip
   Author..... Chip Gracey
   Conrtributions..... Jon McPhalen, Stephen M Moraco
               -- see below for terms of use
   E-mail.....stephen@ironsheep.biz
   Started.... AUG 2023
   Updated.... 11 SEP 2023
 =================================================================================================
 v1.2.0 - initial release of flash_fs with full API
 -------------------------------------------------------------------------------------------------

Object "Draft_flash_fs" Interface:

pub null()
pub version() : result
pub serial_number() : snHi, snLo
pub mount() : status
pub unmount() : status
pub format() : status
pub error() : result
pub open(p_filename, mode) : handle
pub open_circular(p_filename, mode, max_file_length) : handle
pub flush(handle) : status
pub close(handle) : status
pub rename(p_cur_filename, p_new_filename) : status
pub delete(p_filename) : status
pub exists(p_filename) : bool
pub file_size(p_filename) : size_in_bytes
pub file_size_unused(p_filename) : size_in_bytes_unused
pub seek(handle, position) : status
pub write(handle, p_buffer, count) : status
pub wr_byte(handle, byteValue) : status
pub wr_word(handle, word_value) : status
pub wr_long(handle, long_value) : status
pub wr_str(handle, p_str) : status
pub read(handle, p_buffer, count) : bytes_read
pub rd_byte(handle) : value
pub rd_word(handle) : value
pub rd_long(handle) : value
pub rd_str(handle, p_str, count) : bytes_read
pub directory(p_block_id, p_filename, p_file_size) : status
pub stats() : usedBlocks, freeBlocks, fileCount
pub string_for_error(error_code) : p_interpretation

__________
pub null()

 This is not an application
  (invoke format() or mount() to use the flash file system)

______________________
pub version() : result

 Returns flash file system library version as integer
 -- e.g., version 120 is 1.2.0 (major, minor, bugfix)

________________________________
pub serial_number() : snHi, snLo

 Returns 64-bit unique id of flash chip
 @returns snHi - high 32 bits of 64-bit unique id of flash chip (E_NOT_MOUNTED if filesystem has not been mounted)
 @returns snLo - low 32 bits of 64-bit unique id of flash chip (0 when error return)

____________________
pub mount() : status

 Mount the filesystem so it is ready to use after scanning all blocks and initilizing internal tables and buffers
 @returns status - E_BAD_BLOCKS_REMOVED if BAD blocks were found and fixed,
 .. E_NO_LOCK_AVAIL if all 16 LOCKs are in use, otherwise 0 for success

______________________
pub unmount() : status

 Prepare for shutdown / power-off by closing any open files
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem had not been mounted

_____________________
pub format() : status

 Format the file system blocks and (re)mount it
 @returns status - 0 (SUCCESS) if successful,
 .. E_BAD_BLOCKS_REMOVED if BAD blocks were found and fixed,
 .. E_NO_LOCK_AVAIL if all 16 LOCKs are in use, otherwise 0 for success
 .. E_NOT_MOUNTED if filesystem has not been mounted

____________________
pub error() : result

 Returns error code from most recent operation
 @returns result - latest error code (SUCCESS, for no error)

___________________________________
pub open(p_filename, mode) : handle

 Open file in mode; return handle (0..n) if successful
 @param p_filename - address of a zstring containing the filename
 @param mode - the mode in which to open the file:
 -- mode "r", "R" to read from an existing file
 -- mode "w", "W" to write to a new file (or overwrites existing file)
 -- mode "a", "A" to append to the end of an existing file (file is created if doesn't exist)
 @returns handle - handle to open file if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_NO_HANDLE if no handle is available,
 .. E_FILE_MODE if mode letter(s) is/are invalid,
 .. E_DRIVE_FULL if flash filesystem is full (write/append mode),
 .. E_FILE_OPEN if file is already open,
 .. E_FILE_NOT_FOUND if file does not exist (read mode),

_____________________________________________________________
pub open_circular(p_filename, mode, max_file_length) : handle

 Open circular file of max_file_length in mode; return handle (0..n) if successful
 @param p_filename - address of a zstring containing the filename
 @param mode - the mode in which to open the file:
 -- mode "a", "A" to append to the end of an existing circular file (file created if doesn't exist)
 -- mode "r", "R" to read from an existing circular file
 @param max_file_length - constrain the file to this length (in bytes)
 @returns handle - handle to open file if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_NO_HANDLE if no handle is available,
 .. E_BAD_FILE_LENGTH if file length is negative or zero
 .. E_FILE_MODE if mode letter(s) is/are invalid,
 .. E_FILE_NOT_FOUND if file does not exist (read mode),
 .. E_DRIVE_FULL if flash filesystem is full (write/append mode),
 .. E_FILE_OPEN if file is already open,

__________________________
pub flush(handle) : status

 Logically, "close", then "reopen file in same mode" (but you don't lose filehandle when you flush() instead
 @param handle - a handle to an open file
 @returns status - 0 (SUCCESS) if successful,
 .. E_FILE_MODE if close doens't recognize this file mode (internal error)
 .. E_BAD_HANDLE if the handle is not valid

__________________________
pub close(handle) : status

 Close an open file, completes the file write, rewrite, or read-modify-write then frees handle
 @param handle - a handle to an open file
 @returns status - 0 (SUCCESS) if successful,
 .. E_FILE_MODE if close doens't recognize this file mode (internal error)
 .. E_BAD_HANDLE if the handle is not valid

___________________________________________________
pub rename(p_cur_filename, p_new_filename) : status

 Rename a a file named p_cur_filename to p_new_filename
 @param p_cur_filename - address of a zstring containing the existing filename
 @param p_new_filename - address of a zstring containing the new filename
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_FILE_NOT_FOUND if old file doesn't exist,
 .. E_FILE_OPEN if either file is open,
 .. E_FILE_EXISTS if new file already exists,
 .. E_DRIVE_FULL if no available space left in filesystem

_______________________________
pub delete(p_filename) : status

 Delete a named file
 @param p_filename - address of a zstring containing the filename
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_FILE_NOT_FOUND if file doesn't exist,
 .. E_FILE_OPEN if file is open

_____________________________
pub exists(p_filename) : bool

 Determine if named file is present in the file system
 @param p_filename - address of a zstring containing the filename
 @returns result - True/False where True means the file exists
 (sets error() to E_NOT_MOUNTED and returns false if filesystem has not been mounted)

_________________________________________
pub file_size(p_filename) : size_in_bytes

 Return size of file in bytes
 @param p_filename - address of a zstring containing the filename
 @returns size_in_bytes - either the count of bytes contained in the file or
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_FILE_NOT_FOUND if the file doesn't exist

_______________________________________________________
pub file_size_unused(p_filename) : size_in_bytes_unused

 Return the number of bytes not yet written in the last allocated block
 @param p_filename - address of a zstring containing the filename
 @returns size_in_bytes_unused - either the count of unwritten bytes of the file or
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_FILE_NOT_FOUND if the file doesn't exist

___________________________________
pub seek(handle, position) : status

 Postion seek file pointer to position within the file or at the end of the file
 -- use 0 for position to seek to the start of the file
 -- use "size of file" to seek to the end of the file for append
 @param handle - a handle to an open file
 @param position - position (in bytes) within the file (0 to length-1)
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid
 .. E_FILE_MODE if the file is not open in a mode supporting seeks

___________________________________________
pub write(handle, p_buffer, count) : status

 Write count bytes from p_buffer to the file associated with handle
 @param handle - the handle to the file to which to write byte(s)
 @param p_buffer - the address of the buffer containing the users' data to write
 @param count - the number of bytes to write to the file
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for writing,

_______________________________________
pub wr_byte(handle, byteValue) : status

 Write a byte to a file that is open for write or rewrite
 @param handle - handle to a file that is open for write or rewrite
 @param byteValue - value to write to the file
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for writing,

________________________________________
pub wr_word(handle, word_value) : status

 Write WORD (16-bits) to file associated with handle
 -- order is Little Endian
 @param handle - the handle of the file to which to write the WORD
 @param word_value - the 16 bit WORD to write to the file
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for writing,

________________________________________
pub wr_long(handle, long_value) : status

 Write LONG (32-bits) to file associated with handle
 -- order is Little Endian
 @param handle - the handle of the file to which to write the LONG
 @param long_value - the 32 bit LONG to write to the file
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for writing,

__________________________________
pub wr_str(handle, p_str) : status

 Write string (including the terminator) from p_str to file associate with handle
 @param handle - the handle of the file to which to write the zString
 @param p_str - the address of the zString to write to the file
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for writing,

______________________________________________
pub read(handle, p_buffer, count) : bytes_read

 Read count bytes from file associated with handle into p_buffer or to end of file which ever comes first
 -- returns count of bytes read
  check error() == SUCCESS before using contents of p_buffer
  if error() <> SUCCESS then bytes_read is number of bytes read before error occurred
  "bytes_read < expected" also indicates a non-SUCCESS value in error()
 @param handle - the handle to the file from which to read bytes
 @param p_buffer - address of the buffer into which to place the bytes read
 @param count - the maximum number of bytes to place into the buffer
 @returns bytes_read - the number of bytes actually read from the file
 --> If error() <> SUCCESS then it will be one of the following reasons:
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for reading,
 .. E_END_OF_FILE if attempted read beyond written data,

___________________________
pub rd_byte(handle) : value

 Read next byte from file associated with handle
  -- negative value indicates error or end of file
 @param handle - the handle to the file from which to read a byte
 @returns byteValue - the next byte [0-255] from the file, or
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for reading,
 .. E_END_OF_FILE if no more data,

___________________________
pub rd_word(handle) : value

 Read next WORD from file associated with the handle
  -- negative value indicates error or end of file
 @param handle - the handle to the file from which to read a WORD
 @returns result - the WORD value read from the file, or:
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_WRITING if the file is not open for reading,
 .. E_END_OF_FILE if attempted read beyond written data

___________________________
pub rd_long(handle) : value

 Read next LONG from file associated with the handle
  NOTE: negative values can be legitimate values, so
  check error() == SUCCESS before using value
 @param handle - the handle to the file from which to read a LONG
 @returns value - the LONG value read from the file
  error() when not SUCCESS could be:
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_WRITING if the file is not open for reading,
 .. E_END_OF_FILE if attempted read beyond written data

_____________________________________________
pub rd_str(handle, p_str, count) : bytes_read

 Read zstring from file at handle into buffer at p_str (count is max length of string + terminator)
  check error() == SUCCESS before using value
 @param handle - the handle to the file from which to read a zstring
 @param p_str - the address of the buffer into which to place the zstring
 @param count - the maximum number of bytes to place into the buffer (including the terminator)
 @returns bytes_read - the number of bytes placed into the buffer (strsize() of the string read)
  error() when not SUCCESS could be:
 .. E_NOT_MOUNTED if filesystem has not been mounted,
 .. E_BAD_HANDLE if the handle is not valid,
 .. E_FILE_MODE if the file is not open for reading,
 .. E_END_OF_FILE if attempted read beyond written data

___________________________________________________________
pub directory(p_block_id, p_filename, p_file_size) : status

 Get next file's filename and size in bytes via current blockID
  NOTE: p_filename must be address of a 128 byte buffer!
 @param p_block_id - the next block ID to check for a file head. (Initialize to 0, will be auto-advanced by each call to this method)
 @param p_filename - the filename of the file found (or a zero length string if no more files, must be address of 128 byte buffer!)
 @param p_file_size - the number of bytes in the file found (or 0 when no more files)
 @returns status - 0 (SUCCESS) if successful,
 .. E_NOT_MOUNTED if filesystem has not been mounted,

_______________________________________________
pub stats() : usedBlocks, freeBlocks, fileCount

 Get filesystem stats: used/free block counts and file count
 @returns usedBlocks - the number of blocks in use (or E_NOT_MOUNTED if the file system is NOT mounted)
 @returns freeBlocks - the number of free blocks (or 0 if there is an error)
 @returns fileCount - the number of files recorded in filesystem (or 0 if there is an error)

___________________________________________________
pub string_for_error(error_code) : p_interpretation

 Return a string describing the error code
 @param error_code - the error code to translate
 @returns p_interpretation - interpretation of the errcode


  =================================================================================================

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  =================================================================================================
