'' =================================================================================================
''
''   File....... RT_read_write_tests.spin2
''   Purpose.... This object exercises the read/write and mount/unmount functions of the flash filesystem
''   Author..... Stephen M Moraco
''               -- see below for terms of use
''   E-mail.....stephen@ironsheep.biz
''   Started.... AUG 2023
''   Updated.... 10 DEC 2023
''
'' =================================================================================================

CON

     _CLKFREQ        = 320_000_000

'{
    ' debug via serial to RPi (using RPi gateway pins)
    '  USES LED1 (56) and LED2 (57) pins
    DEBUG_PIN_TX = 57           ' GRY GPIO 10
    DEBUG_PIN_RX = 56           ' WHT GPIO 8 (gnd is BLK GPIO 6)
    DEBUG_WINDOWS_OFF = -1      ' no debug windows showing
    DEBUG_BAUD = 2_000_000      ' comms at 2Mbit
'}

OBJ
    flash : "flash_fs"
    utils : "RT_utilities"

DAT

testfile1       BYTE    "rw10bytes.bin", 0
testfile2       BYTE    "rw9words.bin", 0
testfile3       BYTE    "rw12longs.bin", 0
testfile4       BYTE    "rw10strings.zstr", 0
testfile5       BYTE    "fullHeadLongs.bin", 0
testfile6       BYTE    "moreThanHeadLongs.bin", 0
testfile7       BYTE    "moreThanHeadBodyLongs.bin", 0

handle          LONG    0
testValue       LONG    0
status          LONG    0
expectedValue   LONG    0

' structure for directory checking
dirEntr01        LONG    @testfile1     ' pointer to filename
fileBytes01      LONG    10             ' length in bytes
fileBlocks01     LONG    1              ' number of blocks allocated
dirEntr02        LONG    @testfile2     ' pointer to filename
fileBytes02      LONG    18             ' length in bytes
fileBlocks02     LONG    1              ' number of blocks allocated
dirEnd0          LONG    0              ' ptr = NULL, no more entries

dirEntr11        LONG    @testfile1     ' pointer to filename
fileBytes11      LONG    10             ' length in bytes
fileBlocks11     LONG    1              ' number of blocks allocated
dirEntr12        LONG    @testfile2     ' pointer to filename
fileBytes12      LONG    18             ' length in bytes
fileBlocks12     LONG    1              ' number of blocks allocated
dirEntr13        LONG    @testfile3     ' pointer to filename
fileBytes13      LONG    48             ' length in bytes
fileBlocks13     LONG    1              ' number of blocks allocated
dirEnd1          LONG    0              ' ptr = NULL, no more entries

{
pub goTest()

    utils.dbgMemDumpAbs(@"Filename 1", @testfile1, strsize(@testfile1) + 1)
    utils.dbgMemDumpAbs(@"Filename 2", @testfile2, strsize(@testfile2) + 1)
    utils.dbgMemDumpAbs(@"Filename 3", @testfile3, strsize(@testfile3) + 1)
    utils.dbgMemDumpAbs(@"Table 2dirEnt", @dirEntr1, 7 * 4)
    dirEntr1 := @@testfile1
    dirEntr2 := @@testfile3
    utils.dumpDirEnts(@dirEntr1)
'}

PUB go() | snHi, snLo

    status := flash.format()      ' Comment out this line to NOT erase all files
    if status < 0
        utils.showError(@"format()", status)
        return

    status := flash.mount()
    if status < 0
        utils.showError(@"mount()", status)
        return

    utils.ShowStats()                   ' should have empty filesystem
    utils.showFiles()

    utils.showChipAndDriverVersion()

    utils.startTest(@"Ensure we have no files at start")
    utils.ensureEmptyDirectory()

    ' ----------------------------------
    ' TEST
    '  open file for read
    '  ensure returns error (doesn't exist)
    utils.startTest(@"BAD: Read when file doesn't exist")
    handle := flash.open(@testfile1,"r")
    utils.evaluate(handle, flash.E_FILE_NOT_FOUND)

    ' Real tests start here:
    utils.startTestGroup(@"Head block only - partially filled with 5 BYTEs")
    testWriteBytes(@testfile1, 5, 0, 0)
    testVerifyBytes(@testfile1, 5)

    utils.showFiles()

    utils.startTestGroup(@"Head block only (replace file) - partially filled with 10 BYTEs")
    testWriteBytes(@testfile1, 10, 0, 0)
    testVerifyBytes(@testfile1, 10)

    utils.showFiles()

    utils.startTestGroup(@"Head block only - partially filled with 9 WORDs")
    testWriteWords(@testfile2, 9, 1, 1)
    testVerifyWords(@testfile2, 9)

    utils.showFiles()

    utils.startTest(@"Ensure we have 2 files written so far")
    'stuff absolute addresses of filenames into directory entries
    dirEntr01 := @testfile1
    dirEntr02 := @testfile2
    utils.checkMatchingEntries(@dirEntr01)

    'debug("Holding...")
    'repeat ' hold here

    utils.startTestGroup(@"Head block only - partially filled with 12 LONGs")
    testWriteLongs(@testfile3, 12, 2, 2)
    testVerifyLongs(@testfile3, 12)

    utils.showFiles()

    utils.startTest(@"Ensure we have 3 files written so far")
    'stuff absolute addresses of filenames into directory entries
    dirEntr11 := @testfile1
    dirEntr12 := @testfile2
    dirEntr13 := @testfile3
    utils.checkMatchingEntries(@dirEntr11)

    utils.startTestGroup(@"Head block only - partially filled with 10 STRINGs")
    testWriteStrings(@testfile4, 10, 3, 3)              ' 10 is built in for now, so ignored in this call

    utils.showFiles()

    utils.startTestGroup(@"Head block only - filled with LONGs")
    testWriteLongs(@testfile5, flash.LONGS_IN_HEAD_BLOCK, 4, 4)
    testVerifyLongs(@testfile5, flash.LONGS_IN_HEAD_BLOCK)

    utils.startTestGroup(@"Head block + body block - filled with LONGs full head + 2")
    testWriteLongs(@testfile6, flash.LONGS_IN_HEAD_BLOCK+2, 5, 5)
    testVerifyLongs(@testfile6, flash.LONGS_IN_HEAD_BLOCK+2)

    utils.startTestGroup(@"Head block + body block * 2 - filled with LONGs full head, full body, + 2")
    testWriteLongs(@testfile7, flash.LONGS_IN_HEAD_BLOCK + flash.LONGS_IN_BODY_BLOCK+2, 6, 7)
    testVerifyLongs(@testfile7, flash.LONGS_IN_HEAD_BLOCK + flash.LONGS_IN_BODY_BLOCK+2)

    utils.startTestGroup(@"Various odd size reads for Issue (#2)")
    ' REF https://github.com/ironsheep/P2-FLASH-FS/issues/2
    testVerifyReads(@testfile7)

    utils.showFiles()


    ' --- special case - Mount() testing do files survive unmount()/mount()?
    utils.startTestGroup(@"unmount(), mount() - ensure files survive")
    status := flash.unmount()
    utils.evaluate(status, flash.SUCCESS)

    utils.startTest(@"serial_number()  while FS not mounted")
    utils.setCheckCountPerTest(2)
    snHi, snLo := flash.serial_number()
    utils.evaluateSubValue(snHi, @"serial_number() hi", 0)
    utils.evaluateSubValue(snLo, @"serial_number() lo", 0)

    utils.startTest(@"serial_number() valid not mounted status")
    status := flash.error()
    utils.evaluate(status, flash.E_NOT_MOUNTED)

    utils.startTest(@"open()  while FS not mounted")
    status := flash.open(@testfile7, "r")
    utils.evaluate(status, flash.E_NOT_MOUNTED)

    status := flash.mount()
    utils.evaluate(status, flash.SUCCESS)

    utils.showFiles()

    utils.ShowTestEndCounts()

    debug("* Test Complete")


pri testWriteBytes(pFilename, count, startingFileCount, startingBlockCount) | blocksUsed
    '  open file for write
    '  ensure returns SUCCESS
    utils.startTest(@"Open File for write")
    handle := flash.open(pFilename,"w")
    utils.evaluate(handle, flash.SUCCESS)
    utils.startTest(@"Write N BYTEs")
    utils.setCheckCountPerTest(1)
    testValue := 0
    repeat count
        testValue++
        status := flash.wr_byte(handle, testValue)
        utils.evaluateSubStatus(status, @"wr_byte()", flash.SUCCESS)

    utils.startTest(@"ensure no errors on writes")
    utils.evaluate(status, flash.SUCCESS)

    '  dump commit chain
    utils.showPendingCommitChain(handle)

    '  close file
    utils.startTest(@"Close written file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

    utils.showFileDetails(pFilename)

    '  get filesystem stats and verify against expectation
    utils.startTest(@"Ensure expected file system changes")
    utils.evaluateFSStats(@"post file write", startingFileCount + 1, 1 + startingBlockCount)

    '  get single file stats and verify against expectation
    utils.startTest(@"Ensure expected file stats")
    utils.evaluateFileStats(pFilename, 1, count)


pri testVerifyBytes(pFilename, count)
    '  open file for read
    utils.startTest(@"Open File for read")
    handle := flash.open(pFilename,"r")
    utils.evaluate(handle, flash.SUCCESS)
    '    seek to various locations and read longs validating for correct value

    utils.startTest(@"read expected N BYTEs")
    utils.setCheckCountPerTest(2)
    expectedValue := 0
    repeat count
        expectedValue++
        testValue := flash.rd_byte(handle)
        status := testValue < 0 ? testValue : 0
        utils.evaluateSubValue(testValue, @"rd_byte()", expectedValue)
        utils.evaluateSubStatus(status, @"rd_byte()", flash.SUCCESS)

    utils.startTest(@"ensure no errors on reads")
    utils.evaluate(status, flash.SUCCESS)

    '  read past end of file to verify read returns error
    utils.startTest(@"BAD: read one more BYTE than written")
    status := flash.rd_byte(handle)
    utils.evaluate(status, flash.E_END_OF_FILE)

    '  close file
    utils.startTest(@"Close read file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)


pri testWriteWords(pFilename, count, startingFileCount, startingBlockCount)

    '  open file for write
    '  ensure returns SUCCESS
    utils.startTest(@"Open File for write")
    handle := flash.open(pFilename,"w")
    utils.evaluate(handle, flash.SUCCESS)

    utils.startTest(@"Write N WORDs")
    utils.setCheckCountPerTest(1)
    testValue := 0
    repeat count
        testValue++
        status := flash.wr_word(handle, testValue)
        utils.evaluateSubStatus(status, @"wr_word()", flash.SUCCESS)

    utils.startTest(@"ensure no errors on writes")
    utils.evaluate(status, flash.SUCCESS)

    '  dump commit chain
    utils.showPendingCommitChain(handle)

    '  close file
    utils.startTest(@"Close written file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

    utils.showFileDetails(pFilename)

    '  get filesystem stats and verify against expectation
    utils.startTest(@"Ensure expected file system changes")
    utils.evaluateFSStats(@"post file write", startingFileCount + 1, 1 + startingBlockCount)

    '  get single file stats and verify against expectation
    utils.startTest(@"Ensure expected file stats")
    utils.evaluateFileStats(pFilename, 1, count * 2)


pri testVerifyWords(pFilename, count)

    '  open file for read
    utils.startTest(@"Open File for read")
    handle := flash.open(pFilename,"r")
    utils.evaluate(handle, flash.SUCCESS)
    '    seek to various locations and read longs validating for correct value

    utils.startTest(@"read expected N WORDs")
    utils.setCheckCountPerTest(1)
    expectedValue := 0
    repeat count
        expectedValue++
        testValue := flash.rd_word(handle)
        if testValue < 0
            status := testValue
            quit
        utils.evaluateSubValue(testValue, @"rd_word()", expectedValue)

    utils.startTest(@"ensure no errors on reads")
    utils.evaluate(status, flash.SUCCESS)

    '  read past end of file to verify read returns error
    utils.startTest(@"BAD: read one more WORD than written")
    status := flash.rd_word(handle)
    utils.evaluate(status, flash.E_END_OF_FILE)

    '  close file
    utils.startTest(@"Close read file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)


pri testWriteLongs(pFilename, count, startingFileCount, startingBlockCount) | blocksUsed

    '  open file for write
    '  ensure returns SUCCESS
    utils.startTest(@"Open File for write")
    handle := flash.open(pFilename,"w")
    utils.evaluate(handle, flash.SUCCESS)

    utils.startTest(@"Write N LONGs")
    utils.setCheckCountPerTest(1)
    testValue := 0
    repeat count
        testValue++
        status := flash.wr_long(handle, testValue)
        utils.evaluateSubStatus(status, @"wr_long()", flash.SUCCESS)

    utils.startTest(@"ensure no errors on writes")
    utils.evaluate(status, flash.SUCCESS)

    '  dump commit chain
    utils.showPendingCommitChain(handle)

    '  close file
    utils.startTest(@"Close written file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

    utils.showFileDetails(pFilename)

    '  get filesystem stats and verify against expectation
    blocksUsed := utils.blockCountForFileSize(count * 4)
    utils.startTest(@"Ensure expected file system changes")
    utils.evaluateFSStats(@"post file write", startingFileCount + 1, startingBlockCount + blocksUsed)

    '  get single file stats and verify against expectation
    utils.startTest(@"Ensure expected file stats")
    utils.evaluateFileStats(pFilename, blocksUsed, count * 4)


pri testVerifyLongs(pFilename, count)

    '  open file for read
    utils.startTest(@"Open File for read")
    handle := flash.open(pFilename,"r")
    utils.evaluate(handle, flash.SUCCESS)
    '    seek to various locations and read longs validating for correct value

    utils.startTest(@"read expected LONGs")
    utils.setCheckCountPerTest(1)
    expectedValue := 0
    repeat count
        expectedValue++
        testValue := flash.rd_long(handle)
        status := flash.error()
        if status <> flash.SUCCESS
            quit
        utils.evaluateSubValue(testValue, @"rd_long()", expectedValue)

    utils.startTest(@"ensure no errors on reads")
    utils.evaluate(status, flash.SUCCESS)

    '  read past end of file to verify read returns error
    utils.startTest(@"BAD: read one more LONG than written")
    testValue := flash.rd_long(handle)
    status := flash.error()
    utils.evaluate(status, flash.E_END_OF_FILE)

    '  close file
    utils.startTest(@"Close read file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

DAT { test strings }

    testString01     BYTE "This is a test string", 0
    testString02     BYTE "This is a test", 0
    testString03     BYTE "This is a test string, how fun!", 0
    testString04     BYTE "this is something!", 0
    testString05     BYTE "I wonder what?", 0
    testString06     BYTE "Tiny", 0
    testString07     BYTE "Longer", 0
    testString08     BYTE "Ok, let's get really long with this string!", 0
    testString09     BYTE "Members: Jenny, Jisoo, Lisa, Rose", 0
    testString10     BYTE "BlackPink - Blinks", 0


    stringIdTable    ' 1st table-entry must follow immediately
                WORD    @testString01
                WORD    @testString02
                WORD    @testString03
                WORD    @testString04
                WORD    @testString05
                WORD    @testString06
                WORD    @testString07
                WORD    @testString08
                WORD    @testString09
                WORD    @testString10
    stringIdTableEnd ' last entry must be immediately above this line
' ------------------------------------------------------------
stringIdCt       BYTE    (@stringIdTableEnd-@stringIdTable) >> 1   ' div by 2
' ------------------------------------------------------------

con   MAX_STRING_SIZE = (9*16)+1
      MAX_STRINGS_WRITTEN = 10
dat   testStrBuffer     BYTE    0[MAX_STRING_SIZE]
      idxStringWritten     BYTE    0[MAX_STRINGS_WRITTEN]               ' index to strings in order written

pri testWriteStrings(pFilename, count, startingFileCount, startingBlockCount) | strIdx, pString, expectedFileSize, expectedFileBlocks, foundFileSize, rdLength, readWriteIdx, expectedLength, compareResult, pBlock

    '  open file for write
    '  ensure returns SUCCESS
    utils.startTest(@"Open File for write")
    handle := flash.open(pFilename,"w")
    utils.evaluate(handle, flash.SUCCESS)

    utils.startTest(@"Write 10 STRINGs")
    utils.setCheckCountPerTest(1)
    expectedFileSize := 0
    repeat readWriteIdx from 0 to MAX_STRINGS_WRITTEN - 1
        strIdx := (GETRND() +// stringIdCt)
        pString := WORD[@stringIdTable][strIdx] ' get ptr to string
        BYTE[@idxStringWritten][readWriteIdx] := strIdx
        expectedFileSize += strsize(pString) + 1
        status := flash.wr_str(handle, pString)
        utils.evaluateSubStatus(status, @"wr_str()", flash.SUCCESS)

    utils.startTest(@"ensure no errors on writes")
    utils.evaluate(status, flash.SUCCESS)

    '  dump commit chain
    utils.showPendingCommitChain(handle)

    '  close file
    utils.startTest(@"Close written file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

    {
    ' AUGH dump head block to see if content is correct
    pBlock := flash.getHead4kBlock(pFilename)
    ' reuse status for a minute
    status := ((expectedFileSize + 64) + 32) & $FFFF_FFF0            ' ensure muiple of 16 bytes
    utils.dbgMemDump(@"String file Head block", pBlock, status)
    status := flash.SUCCESS ' clear our temp use
    '}

    utils.showFileDetails(pFilename)
    expectedFileBlocks := utils.blockCountForFileSize(expectedFileSize)
    '  get filesystem stats and verify against expectation
    utils.startTest(@"Ensure expected file system changes")
    utils.evaluateFSStats(@"post file write", startingFileCount + 1, startingBlockCount + expectedFileBlocks)

    '  get single file stats and verify against expectation
    utils.startTest(@"Ensure expected file stats")
    utils.evaluateFileStats(pFilename, expectedFileBlocks, expectedFileSize)

    '  open file for read
    utils.startTest(@"Open File for read")
    handle := flash.open(pFilename,"r")
    utils.evaluate(handle, flash.SUCCESS)
    '    seek to various locations and read longs validating for correct value

    utils.startTest(@"read expected 10 STRINGs")
    utils.setCheckCountPerTest(2)
    foundFileSize := 0
    repeat readWriteIdx from 0 to MAX_STRINGS_WRITTEN - 1
         strIdx := BYTE[@idxStringWritten][readWriteIdx]
        pString := WORD[@stringIdTable][strIdx] ' get ptr to string
        ' the read call doesn't count terminator in length
        expectedLength := strsize(pString)
        rdLength := flash.rd_str(handle, @testStrBuffer, MAX_STRING_SIZE)
        if rdLength < 0
            status := rdLength
            quit
        ' ensure length is same as expected
        utils.evaluateSubValue(rdLength, @"rd_str()", expectedLength)
        ' ensure string is same as expected
        compareResult := strcomp(@testStrBuffer, pString)
        utils.evaluateSubValue(compareResult, @"rd_str()", true)

    utils.startTest(@"ensure no errors on reads")
    utils.evaluate(status, flash.SUCCESS)

    '  read past end of file to verify read returns error
    utils.startTest(@"BAD: read one more STRING than written")
    flash.rd_str(handle, @testStrBuffer, MAX_STRING_SIZE)
    status := flash.error()
    utils.evaluate(status, flash.E_END_OF_FILE)

    '  close file
    utils.startTest(@"Close read file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

CON

   MAX_READ_BYTES = 32

DAT

    readBuffer      BYTE    0[MAX_READ_BYTES]

pri testVerifyReads(pFilename) | fileSizeInBytes, accumulatedReadLength, readLen, bytesReadCount, rdNbr, pStatus

    utils.startTest(@"Determine size of file in bytes")
    fileSizeInBytes := flash.file_size(pFilename)
    status := flash.error()
    utils.evaluate(handle, flash.SUCCESS)
    debug("* working with ", udec_(fileSizeInBytes), " byte file")

    '  open file for read
    utils.startTest(@"Open File for read")
    handle := flash.open(pFilename,"r")
    utils.evaluate(handle, flash.SUCCESS)

    '  read various sizes from the file
    utils.startTest(@"read 20 N-length groups of bytes")
    utils.setCheckCountPerTest(2)
    accumulatedReadLength := 0
    repeat rdNbr from 1 to 20
        repeat
            readLen := (GETRND() +// MAX_READ_BYTES)
        while readLen == 0  'heh, don't allow zero length reads
        accumulatedReadLength += readLen
        if accumulatedReadLength > fileSizeInBytes
            debug("- done, past end of file")
                quit
        bytesReadCount := flash.read(handle, @readBuffer, readLen)
        status := flash.error()
        pStatus := (status == flash.SUCCESS and bytesReadCount == readLen) ? @"pass" : @"FAIL"
        debug("  -- Read #", udec_(rdNbr), " ", udec_(readLen), " byte(s) - ", zstr_(pStatus))
        utils.evaluateSubValue(bytesReadCount, @"read()", readLen)
        utils.evaluateSubStatus(status, @"read()", flash.SUCCESS)

    utils.startTest(@"ensure no errors on reads")
    utils.evaluate(status, flash.SUCCESS)

    '  close file
    utils.startTest(@"Close read file")
    status := flash.close(handle)
    utils.evaluate(status, flash.SUCCESS)

con { license }

{{
  =================================================================================================

  Terms of Use: MIT License

  Copyright (c) 2023 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  =================================================================================================
}}
