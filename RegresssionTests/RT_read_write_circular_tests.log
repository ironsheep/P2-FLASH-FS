Cog0  INIT $0000_0000 $0000_0000 load
Cog0  INIT $0000_0EC0 $0000_D308 jump
Cog0  * init VAR
Cog0
Cog0  * Test #1: Check Flash Mount-ability
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #2: Format Flash
Cog0  - cancel_block() block_address = $00E8
Cog0  - cancel_block() block_address = $0405
Cog0  - cancel_block() block_address = $0506
Cog0  - cancel_block() block_address = $088C
Cog0  - cancel_block() block_address = $0944
Cog0  - cancel_block() block_address = $0F5C
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #3: Mount Flash FS
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0  blocksUsed = 0, blocksFree = 3_968, fileCount = 0
Cog0
Cog0    All Files:
Cog0
Cog0  * Environment: Chip S/N and Driver Version
Cog0     CHIP Serial Number: $E461_2D03-$D35B_1A2A
Cog0     Driver: flash_fs v2.0.0
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: A1 Append 6KB circular to empty file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(6, start: fils=0, blks=0):
Cog0     size: 0 bytes, 0 records, write [1-6]
Cog0
Cog0  * Test #4: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #5: Write Records
Cog0  * wr_block() block_address = $0C43, block_id = 0, NextID_EndPtr = $0001
Cog0  - program_block() block_address = $0C43
Cog0    Sub-Test Results: count=6, Pass: 6, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #6: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw0KB-A1-blocks.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$0C43] HEAD/more, thisID=0, dataOfs=0, nextId=1, lifeCycle [erased], sig=[$0010_00FD]
Cog0      2: [$0000] BODY/last, thisID=1, endPtr=$0890, lifeCycle [erased], sig=[$8900_01F6]  MODIFIED
Cog0
Cog0  * Test #7: Close written file
Cog0  * wr_block() block_address = $0532, block_id = 1, NextID_EndPtr = $0890
Cog0  - program_block() block_address = $0532
Cog0  - activate_block() block_address = $0532
Cog0  - activate_block() block_address = $0C43
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 6_144 bytes, 2 blocks (added 2)
Cog0
Cog0  * Test #8: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 2, 3_966, 1
Cog0    # files: 1
Cog0    # blocks used: 2
Cog0     -> pass
Cog0
Cog0  * Test #9: Ensure expected file stats
Cog0    File: [rw0KB-A1-blocks.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$0C43] HEAD/more, thisID=0, dataOfs=0, nextId=1, lifeCycle [ACTIVE-3], sig=[$0010_007D]
Cog0      2: [$0532] BODY/last, thisID=1, endPtr=$0890, lifeCycle [ACTIVE-3], sig=[$8900_017E]
Cog0    # blocks: 2
Cog0    # bytes used: 6_144, expectedBytesUsed = 6_144
Cog0     -> pass
Cog0
Cog0  * Test #10: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 6_144, recordCount = 6, totalRecordsWritten = 6
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #1
Cog0
Cog0  * Test #11: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #12: read expected RECORDs
Cog0    Sub-Test Results: count=6, Pass: 6, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #13: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #14: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #15: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: A2 Append 8KB circular to empty file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(8, start: fils=1, blks=2):
Cog0     size: 0 bytes, 0 records, write [1-8]
Cog0
Cog0  * Test #16: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #17: Write Records
Cog0  * wr_block() block_address = $0A46, block_id = 2, NextID_EndPtr = $0003
Cog0  - program_block() block_address = $0A46
Cog0  * wr_block() block_address = $0807, block_id = 3, NextID_EndPtr = $0004
Cog0  - program_block() block_address = $0807
Cog0  - activate_block() block_address = $0807
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #18: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw0KB-A2-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0A46] HEAD/more, thisID=2, dataOfs=0, nextId=3, lifeCycle [erased], sig=[$0030_02FD]
Cog0      2: [$0807] BODY/more, thisID=3, nextId=4, lifeCycle [ACTIVE-3], sig=[$0040_037F]
Cog0      3: [$0000] BODY/last, thisID=4, endPtr=$0098, lifeCycle [erased], sig=[$0980_04F6]  MODIFIED
Cog0
Cog0  * Test #19: Close written file
Cog0  * wr_block() block_address = $0473, block_id = 4, NextID_EndPtr = $0098
Cog0  - program_block() block_address = $0473
Cog0  - activate_block() block_address = $0473
Cog0  - activate_block() block_address = $0A46
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 8_192 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #20: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 5, 3_963, 2
Cog0    # files: 2
Cog0    # blocks used: 5
Cog0     -> pass
Cog0
Cog0  * Test #21: Ensure expected file stats
Cog0    File: [rw0KB-A2-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0A46] HEAD/more, thisID=2, dataOfs=0, nextId=3, lifeCycle [ACTIVE-3], sig=[$0030_027D]
Cog0      2: [$0807] BODY/more, thisID=3, nextId=4, lifeCycle [ACTIVE-3], sig=[$0040_037F]
Cog0      3: [$0473] BODY/last, thisID=4, endPtr=$0098, lifeCycle [ACTIVE-3], sig=[$0980_047E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_192, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #22: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 8_192, recordCount = 8, totalRecordsWritten = 8
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #1
Cog0
Cog0  * Test #23: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #24: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #25: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #26: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #27: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: A3 Append 12KB circular to empty file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(12, start: fils=2, blks=5):
Cog0     size: 0 bytes, 0 records, write [1-12]
Cog0
Cog0  * Test #28: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #29: Write Records
Cog0  * wr_block() block_address = $089D, block_id = 5, NextID_EndPtr = $0006
Cog0  - program_block() block_address = $089D
Cog0  * wr_block() block_address = $0509, block_id = 6, NextID_EndPtr = $0007
Cog0  - program_block() block_address = $0509
Cog0  - activate_block() block_address = $0509
Cog0  * wr_block() block_address = $0790, block_id = 7, NextID_EndPtr = $0008
Cog0  - program_block() block_address = $0790
Cog0  - activate_block() block_address = $0790
Cog0    Sub-Test Results: count=12, Pass: 12, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #30: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw0KB-A3-blocks.bin] pending commit
Cog0    # 4 Blocks in chain:
Cog0      1: [$089D] HEAD/more, thisID=5, dataOfs=0, nextId=6, lifeCycle [erased], sig=[$0060_05FD]
Cog0      2: [$0509] BODY/more, thisID=6, nextId=7, lifeCycle [ACTIVE-3], sig=[$0070_067F]
Cog0      3: [$0790] BODY/more, thisID=7, nextId=8, lifeCycle [ACTIVE-3], sig=[$0080_077F]
Cog0      4: [$0000] BODY/last, thisID=8, endPtr=$00A0, lifeCycle [erased], sig=[$0A00_08F6]  MODIFIED
Cog0
Cog0  * Test #31: Close written file
Cog0  * wr_block() block_address = $0E84, block_id = 8, NextID_EndPtr = $00A0
Cog0  - program_block() block_address = $0E84
Cog0  - activate_block() block_address = $0E84
Cog0  - activate_block() block_address = $089D
Cog0  * froncate(id=5, 8_192) size_in_bytes = 12_288, new_head_block_id = 6, block_offset = $0090(144)
Cog0  - header [$032F] thisID=5, nextID=7, sig=[$0070_057D]
Cog0  * program_updated_block() block_address = $032F
Cog0  - program_block() block_address = $032F
Cog0  - activate_block() block_address = $032F
Cog0  * delChnFmID() [$089D] block_id = 5, EndID = 6, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $089D
Cog0  - cancel_block() block_address = $0509
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 12_132 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #32: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 8, 3_960, 3
Cog0    # files: 3
Cog0    # blocks used: 8
Cog0     -> pass
Cog0
Cog0  * Test #33: Ensure expected file stats
Cog0    File: [rw0KB-A3-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$032F] HEAD/more, thisID=5, dataOfs=8, nextId=7, lifeCycle [ACTIVE-5], sig=[$0070_05BD]
Cog0      2: [$0790] BODY/more, thisID=7, nextId=8, lifeCycle [ACTIVE-3], sig=[$0080_077F]
Cog0      3: [$0E84] BODY/last, thisID=8, endPtr=$00A0, lifeCycle [ACTIVE-3], sig=[$0A00_087E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_200, expectedBytesUsed = 12_132
Cog0     -> pass
Cog0
Cog0  * Test #34: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 8_200, recordCount = 8, totalRecordsWritten = 12
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #5
Cog0
Cog0  * Test #35: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #36: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #37: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #38: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #39: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: B1 Append 5KB circular to 3kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(3, start: fils=3, blks=8):
Cog0     size: 0 bytes, 0 records, write [1-3]
Cog0
Cog0  * Test #40: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #41: Write Records
Cog0    Sub-Test Results: count=3, Pass: 3, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #42: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B1-blocks.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=6, dataOfs=$0000, endPtr=$0C88, lifeCycle [erased], sig=[$C880_06F4]  MODIFIED
Cog0
Cog0  * Test #43: Close written file
Cog0  * wr_block() block_address = $03B2, block_id = 6, NextID_EndPtr = $0C88
Cog0  - program_block() block_address = $03B2
Cog0  - activate_block() block_address = $03B2
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 3_072 bytes, 1 blocks (added 1)
Cog0
Cog0  * Test #44: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 9, 3_959, 4
Cog0    # files: 4
Cog0    # blocks used: 9
Cog0     -> pass
Cog0
Cog0  * Test #45: Ensure expected file stats
Cog0    File: [rw3KB-B1-blocks.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$03B2] HEAD/last, thisID=6, dataOfs=$0000, endPtr=$0C88, lifeCycle [ACTIVE-3], sig=[$C880_067C]
Cog0    # blocks: 1
Cog0    # bytes used: 3_072, expectedBytesUsed = 3_072
Cog0     -> pass
Cog0
Cog0  * Test #46: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(5, start: fils=4, blks=9):
Cog0     size: 3_072 bytes, 3 records, write [4-8]
Cog0
Cog0  * Test #47: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #48: Write Records
Cog0  * wr_block() block_address = $024D, block_id = 6, NextID_EndPtr = $0009
Cog0  - program_block() block_address = $024D
Cog0  * wr_block() block_address = $0844, block_id = 9, NextID_EndPtr = $000A
Cog0  - program_block() block_address = $0844
Cog0  - activate_block() block_address = $0844
Cog0    Sub-Test Results: count=5, Pass: 5, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #49: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B1-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$024D] HEAD/more, thisID=6, dataOfs=0, nextId=9, lifeCycle [erased], sig=[$0090_06FD]
Cog0      2: [$0844] BODY/more, thisID=9, nextId=10, lifeCycle [ACTIVE-3], sig=[$00A0_097F]
Cog0      3: [$0000] BODY/last, thisID=10, endPtr=$0098, lifeCycle [erased], sig=[$0980_0AF6]  MODIFIED
Cog0
Cog0  * Test #50: Close written file
Cog0  * wr_block() block_address = $07F7, block_id = 10, NextID_EndPtr = $0098
Cog0  - program_block() block_address = $07F7
Cog0  - activate_block() block_address = $07F7
Cog0  - activate_block() block_address = $024D
Cog0  * delChnFmID() [$03B2] block_id = 6, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $03B2
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 2)
Cog0
Cog0  * Test #51: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 11, 3_957, 4
Cog0    # files: 4
Cog0    # blocks used: 11
Cog0     -> pass
Cog0
Cog0  * Test #52: Ensure expected file stats
Cog0    File: [rw3KB-B1-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$024D] HEAD/more, thisID=6, dataOfs=0, nextId=9, lifeCycle [ACTIVE-5], sig=[$0090_06BD]
Cog0      2: [$0844] BODY/more, thisID=9, nextId=10, lifeCycle [ACTIVE-3], sig=[$00A0_097F]
Cog0      3: [$07F7] BODY/last, thisID=10, endPtr=$0098, lifeCycle [ACTIVE-3], sig=[$0980_0A7E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_192, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #53: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 8_192, recordCount = 8, totalRecordsWritten = 8
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #1
Cog0
Cog0  * Test #54: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #55: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #56: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #57: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #58: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: B2 Append 8KB circular to 3kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(3, start: fils=4, blks=11):
Cog0     size: 0 bytes, 0 records, write [1-3]
Cog0
Cog0  * Test #59: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #60: Write Records
Cog0    Sub-Test Results: count=3, Pass: 3, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #61: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B2-blocks.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=11, dataOfs=$0000, endPtr=$0C88, lifeCycle [erased], sig=[$C880_0BF4]  MODIFIED
Cog0
Cog0  * Test #62: Close written file
Cog0  * wr_block() block_address = $01B5, block_id = 11, NextID_EndPtr = $0C88
Cog0  - program_block() block_address = $01B5
Cog0  - activate_block() block_address = $01B5
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 3_072 bytes, 1 blocks (added 1)
Cog0
Cog0  * Test #63: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 12, 3_956, 5
Cog0    # files: 5
Cog0    # blocks used: 12
Cog0     -> pass
Cog0
Cog0  * Test #64: Ensure expected file stats
Cog0    File: [rw3KB-B2-blocks.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$01B5] HEAD/last, thisID=11, dataOfs=$0000, endPtr=$0C88, lifeCycle [ACTIVE-3], sig=[$C880_0B7C]
Cog0    # blocks: 1
Cog0    # bytes used: 3_072, expectedBytesUsed = 3_072
Cog0     -> pass
Cog0
Cog0  * Test #65: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(8, start: fils=5, blks=12):
Cog0     size: 3_072 bytes, 3 records, write [4-11]
Cog0
Cog0  * Test #66: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #67: Write Records
Cog0  * wr_block() block_address = $0904, block_id = 11, NextID_EndPtr = $000C
Cog0  - program_block() block_address = $0904
Cog0  * wr_block() block_address = $0613, block_id = 12, NextID_EndPtr = $000D
Cog0  - program_block() block_address = $0613
Cog0  - activate_block() block_address = $0613
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #68: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B2-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0904] HEAD/more, thisID=11, dataOfs=0, nextId=12, lifeCycle [erased], sig=[$00C0_0BFD]
Cog0      2: [$0613] BODY/more, thisID=12, nextId=13, lifeCycle [ACTIVE-3], sig=[$00D0_0C7F]
Cog0      3: [$0000] BODY/last, thisID=13, endPtr=$0C98, lifeCycle [erased], sig=[$C980_0DF6]  MODIFIED
Cog0
Cog0  * Test #69: Close written file
Cog0  * wr_block() block_address = $0430, block_id = 13, NextID_EndPtr = $0C98
Cog0  - program_block() block_address = $0430
Cog0  - activate_block() block_address = $0430
Cog0  - activate_block() block_address = $0904
Cog0  * delChnFmID() [$01B5] block_id = 11, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $01B5
Cog0  * froncate(id=11, 8_192) size_in_bytes = 11_264, new_head_block_id = 11, block_offset = $0C88(3_208)
Cog0  - header [$0CFA] thisID=11, nextID=12, sig=[$00C0_0BBD]
Cog0  * program_updated_block() block_address = $0CFA
Cog0  - program_block() block_address = $0CFA
Cog0  - activate_block() block_address = $0CFA
Cog0  * delChnFmID() [$0904] block_id = 11, EndID = 11, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0904
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 2)
Cog0
Cog0  * Test #70: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 14, 3_954, 5
Cog0    # files: 5
Cog0    # blocks used: 14
Cog0     -> pass
Cog0
Cog0  * Test #71: Ensure expected file stats
Cog0    File: [rw3KB-B2-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0CFA] HEAD/more, thisID=11, dataOfs=3_072, nextId=12, lifeCycle [ACTIVE-6], sig=[$00C0_0BDD]
Cog0      2: [$0613] BODY/more, thisID=12, nextId=13, lifeCycle [ACTIVE-3], sig=[$00D0_0C7F]
Cog0      3: [$0430] BODY/last, thisID=13, endPtr=$0C98, lifeCycle [ACTIVE-3], sig=[$C980_0D7E]
Cog0    # blocks: 3
Cog0    # bytes used: 11_264, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #72: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 11_264, recordCount = 11, totalRecordsWritten = 11
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #4
Cog0
Cog0  * Test #73: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #74: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #75: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #76: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #77: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: B3 Append 11KB circular to 3kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(3, start: fils=5, blks=14):
Cog0    size: 0 bytes, 0 records, write [1-3]
Cog0
Cog0  * Test #78: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #79: Write Records
Cog0    Sub-Test Results: count=3, Pass: 3, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #80: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B3-blocks.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=14, dataOfs=$0000, endPtr=$0C88, lifeCycle [erased], sig=[$C880_0EF4]  MODIFIED
Cog0
Cog0  * Test #81: Close written file
Cog0  * wr_block() block_address = $06DF, block_id = 14, NextID_EndPtr = $0C88
Cog0  - program_block() block_address = $06DF
Cog0  - activate_block() block_address = $06DF
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 3_072 bytes, 1 blocks (added 1)
Cog0
Cog0  * Test #82: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 15, 3_953, 6
Cog0    # files: 6
Cog0    # blocks used: 15
Cog0     -> pass
Cog0
Cog0  * Test #83: Ensure expected file stats
Cog0    File: [rw3KB-B3-blocks.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$06DF] HEAD/last, thisID=14, dataOfs=$0000, endPtr=$0C88, lifeCycle [ACTIVE-3], sig=[$C880_0E7C]
Cog0    # blocks: 1
Cog0    # bytes used: 3_072, expectedBytesUsed = 3_072
Cog0     -> pass
Cog0
Cog0  * Test #84: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(11, start: fils=6, blks=15):
Cog0     size: 3_072 bytes, 3 records, write [4-14]
Cog0
Cog0  * Test #85: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #86: Write Records
Cog0  * wr_block() block_address = $0AFA, block_id = 14, NextID_EndPtr = $000F
Cog0  - program_block() block_address = $0AFA
Cog0  * wr_block() block_address = $0C4E, block_id = 15, NextID_EndPtr = $0010
Cog0  - program_block() block_address = $0C4E
Cog0  - activate_block() block_address = $0C4E
Cog0  * wr_block() block_address = $054B, block_id = 16, NextID_EndPtr = $0011
Cog0  - program_block() block_address = $054B
Cog0  - activate_block() block_address = $054B
Cog0    Sub-Test Results: count=11, Pass: 11, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #87: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B3-blocks.bin] pending commit
Cog0    # 4 Blocks in chain:
Cog0      1: [$0AFA] HEAD/more, thisID=14, dataOfs=0, nextId=15, lifeCycle [erased], sig=[$00F0_0EFD]
Cog0      2: [$0C4E] BODY/more, thisID=15, nextId=16, lifeCycle [ACTIVE-3], sig=[$0100_0F7F]
Cog0      3: [$054B] BODY/more, thisID=16, nextId=17, lifeCycle [ACTIVE-3], sig=[$0110_107F]
Cog0      4: [$0000] BODY/last, thisID=17, endPtr=$08A0, lifeCycle [erased], sig=[$8A00_11F6]  MODIFIED
Cog0
Cog0  * Test #88: Close written file
Cog0  * wr_block() block_address = $002D, block_id = 17, NextID_EndPtr = $08A0
Cog0  - program_block() block_address = $002D
Cog0  - activate_block() block_address = $002D
Cog0  - activate_block() block_address = $0AFA
Cog0  * delChnFmID() [$06DF] block_id = 14, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $06DF
Cog0  * froncate(id=14, 8_192) size_in_bytes = 14_336, new_head_block_id = 15, block_offset = $0890(2_192)
Cog0  - header [$017C] thisID=14, nextID=16, sig=[$0100_0EBD]
Cog0  * program_updated_block() block_address = $017C
Cog0  - program_block() block_address = $017C
Cog0  - activate_block() block_address = $017C
Cog0  * delChnFmID() [$0AFA] block_id = 14, EndID = 15, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0AFA
Cog0  - cancel_block() block_address = $0C4E
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 2)
Cog0
Cog0  * Test #89: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 17, 3_951, 6
Cog0    # files: 6
Cog0    # blocks used: 17
Cog0     -> pass
Cog0
Cog0  * Test #90: Ensure expected file stats
Cog0    File: [rw3KB-B3-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$017C] HEAD/more, thisID=14, dataOfs=2_056, nextId=16, lifeCycle [ACTIVE-6], sig=[$0100_0EDD]
Cog0      2: [$054B] BODY/more, thisID=16, nextId=17, lifeCycle [ACTIVE-3], sig=[$0110_107F]
Cog0      3: [$002D] BODY/last, thisID=17, endPtr=$08A0, lifeCycle [ACTIVE-3], sig=[$8A00_117E]
Cog0    # blocks: 3
Cog0    # bytes used: 10_248, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #91: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 10_248, recordCount = 10, totalRecordsWritten = 14
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #7
Cog0
Cog0  * Test #92: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #93: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #94: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #95: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #96: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: B3a Seek within file that was append 11KB circular to 3kb file
Cog0
Cog0  * Test #97: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  ****  At VerifySeek: file size in bytes = 10_248 bytes, (10 records), wrote total of 14 records
Cog0     Circular Buffer contains = 8 records
Cog0     Read should start with record #7
Cog0
Cog0  * Test #98: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #99: seek to 3 then read expected RECORD
Cog0     -- Verifying Rcd # 9
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #100: seek to zero then read expected RECORD
Cog0     -- Verifying Rcd # 7
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #101: seek to N-1 then read expected RECORD
Cog0     -- Verifying Rcd # 14
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #102: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #103: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: B4 Append 14KB circular to 3kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(3, start: fils=6, blks=17):
Cog0     size: 0 bytes, 0 records, write [1-3]
Cog0
Cog0  * Test #104: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #105: Write Records
Cog0    Sub-Test Results: count=3, Pass: 3, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #106: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B4-blocks.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=15, dataOfs=$0000, endPtr=$0C88, lifeCycle [erased], sig=[$C880_0FF4]  MODIFIED
Cog0
Cog0  * Test #107: Close written file
Cog0  * wr_block() block_address = $0A72, block_id = 15, NextID_EndPtr = $0C88
Cog0  - program_block() block_address = $0A72
Cog0  - activate_block() block_address = $0A72
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 3_072 bytes, 1 blocks (added 1)
Cog0
Cog0  * Test #108: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 18, 3_950, 7
Cog0    # files: 7
Cog0    # blocks used: 18
Cog0     -> pass
Cog0
Cog0  * Test #109: Ensure expected file stats
Cog0    File: [rw3KB-B4-blocks.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$0A72] HEAD/last, thisID=15, dataOfs=$0000, endPtr=$0C88, lifeCycle [ACTIVE-3], sig=[$C880_0F7C]
Cog0    # blocks: 1
Cog0    # bytes used: 3_072, expectedBytesUsed = 3_072
Cog0     -> pass
Cog0
Cog0  * Test #110: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(14, start: fils=7, blks=18):
Cog0     size: 3_072 bytes, 3 records, write [4-17]
Cog0
Cog0  * Test #111: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #112: Write Records
Cog0  * wr_block() block_address = $0EEC, block_id = 15, NextID_EndPtr = $0012
Cog0  - program_block() block_address = $0EEC
Cog0  * wr_block() block_address = $08E8, block_id = 18, NextID_EndPtr = $0013
Cog0  - program_block() block_address = $08E8
Cog0  - activate_block() block_address = $08E8
Cog0  * wr_block() block_address = $0017, block_id = 19, NextID_EndPtr = $0014
Cog0  - program_block() block_address = $0017
Cog0  - activate_block() block_address = $0017
Cog0  * wr_block() block_address = $0871, block_id = 20, NextID_EndPtr = $0015
Cog0  - program_block() block_address = $0871
Cog0  - activate_block() block_address = $0871
Cog0    Sub-Test Results: count=14, Pass: 14, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #113: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw3KB-B4-blocks.bin] pending commit
Cog0    # 5 Blocks in chain:
Cog0      1: [$0EEC] HEAD/more, thisID=15, dataOfs=0, nextId=18, lifeCycle [erased], sig=[$0120_0FFD]
Cog0      2: [$08E8] BODY/more, thisID=18, nextId=19, lifeCycle [ACTIVE-3], sig=[$0130_127F]
Cog0      3: [$0017] BODY/more, thisID=19, nextId=20, lifeCycle [ACTIVE-3], sig=[$0140_137F]
Cog0      4: [$0871] BODY/more, thisID=20, nextId=21, lifeCycle [ACTIVE-3], sig=[$0150_147F]
Cog0      5: [$0000] BODY/last, thisID=21, endPtr=$04A8, lifeCycle [erased], sig=[$4A80_15F6]  MODIFIED
Cog0
Cog0  * Test #114: Close written file
Cog0  * wr_block() block_address = $0486, block_id = 21, NextID_EndPtr = $04A8
Cog0  - program_block() block_address = $0486
Cog0  - activate_block() block_address = $0486
Cog0  - activate_block() block_address = $0EEC
Cog0  * delChnFmID() [$0A72] block_id = 15, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0A72
Cog0  * froncate(id=15, 8_192) size_in_bytes = 17_408, new_head_block_id = 19, block_offset = $0498(1_176)
Cog0  - header [$0CCE] thisID=15, nextID=20, sig=[$0140_0FBD]
Cog0  * program_updated_block() block_address = $0CCE
Cog0  - program_block() block_address = $0CCE
Cog0  - activate_block() block_address = $0CCE
Cog0  * delChnFmID() [$0EEC] block_id = 15, EndID = 19, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0EEC
Cog0  - cancel_block() block_address = $08E8
Cog0  - cancel_block() block_address = $0017
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 2)
Cog0
Cog0  * Test #115: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 20, 3_948, 7
Cog0    # files: 7
Cog0    # blocks used: 20
Cog0     -> pass
Cog0
Cog0  * Test #116: Ensure expected file stats
Cog0    File: [rw3KB-B4-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0CCE] HEAD/more, thisID=15, dataOfs=1_040, nextId=20, lifeCycle [ACTIVE-6], sig=[$0140_0FDD]
Cog0      2: [$0871] BODY/more, thisID=20, nextId=21, lifeCycle [ACTIVE-3], sig=[$0150_147F]
Cog0      3: [$0486] BODY/last, thisID=21, endPtr=$04A8, lifeCycle [ACTIVE-3], sig=[$4A80_157E]
Cog0    # blocks: 3
Cog0    # bytes used: 9_232, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #117: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 9_232, recordCount = 9, totalRecordsWritten = 17
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #10
Cog0
Cog0  * Test #118: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #119: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #120: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #121: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #122: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: C1 Append 4KB circular to 8kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(8, start: fils=7, blks=20):
Cog0     size: 0 bytes, 0 records, write [1-8]
Cog0
Cog0  * Test #123: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #124: Write Records
Cog0  * wr_block() block_address = $0CFC, block_id = 18, NextID_EndPtr = $0013
Cog0  - program_block() block_address = $0CFC
Cog0  * wr_block() block_address = $086D, block_id = 19, NextID_EndPtr = $0016
Cog0  - program_block() block_address = $086D
Cog0  - activate_block() block_address = $086D
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #125: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-C1-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0CFC] HEAD/more, thisID=18, dataOfs=0, nextId=19, lifeCycle [erased], sig=[$0130_12FD]
Cog0      2: [$086D] BODY/more, thisID=19, nextId=22, lifeCycle [ACTIVE-3], sig=[$0160_137F]
Cog0      3: [$0000] BODY/last, thisID=22, endPtr=$0098, lifeCycle [erased], sig=[$0980_16F6]  MODIFIED
Cog0
Cog0  * Test #126: Close written file
Cog0  * wr_block() block_address = $08D7, block_id = 22, NextID_EndPtr = $0098
Cog0  - program_block() block_address = $08D7
Cog0  - activate_block() block_address = $08D7
Cog0  - activate_block() block_address = $0CFC
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 8_192 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #127: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 23, 3_945, 8
Cog0    # files: 8
Cog0    # blocks used: 23
Cog0     -> pass
Cog0
Cog0  * Test #128: Ensure expected file stats
Cog0    File: [rw8KB-C1-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0CFC] HEAD/more, thisID=18, dataOfs=0, nextId=19, lifeCycle [ACTIVE-3], sig=[$0130_127D]
Cog0      2: [$086D] BODY/more, thisID=19, nextId=22, lifeCycle [ACTIVE-3], sig=[$0160_137F]
Cog0      3: [$08D7] BODY/last, thisID=22, endPtr=$0098, lifeCycle [ACTIVE-3], sig=[$0980_167E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_192, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #129: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(4, start: fils=8, blks=23):
Cog0     size: 8_192 bytes, 8 records, write [9-12]
Cog0
Cog0  * Test #130: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #131: Write Records
Cog0  * wr_block() block_address = $08F8, block_id = 22, NextID_EndPtr = $0017
Cog0  - program_block() block_address = $08F8
Cog0    Sub-Test Results: count=4, Pass: 4, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #132: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-C1-blocks.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$08F8] BODY/more, thisID=22, nextId=23, lifeCycle [erased], sig=[$0170_16FF]
Cog0      2: [$0000] BODY/last, thisID=23, endPtr=$00A0, lifeCycle [erased], sig=[$0A00_17F6]  MODIFIED
Cog0
Cog0  * Test #133: Close written file
Cog0  * wr_block() block_address = $0A8B, block_id = 23, NextID_EndPtr = $00A0
Cog0  - program_block() block_address = $0A8B
Cog0  - activate_block() block_address = $0A8B
Cog0  - activate_block() block_address = $08F8
Cog0  * delChnFmID() [$08D7] block_id = 22, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $08D7
Cog0  * froncate(id=18, 8_192) size_in_bytes = 12_288, new_head_block_id = 19, block_offset = $0090(144)
Cog0  - header [$0891] thisID=18, nextID=22, sig=[$0160_127D]
Cog0  * program_updated_block() block_address = $0891
Cog0  - program_block() block_address = $0891
Cog0  - activate_block() block_address = $0891
Cog0  * delChnFmID() [$0CFC] block_id = 18, EndID = 19, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0CFC
Cog0  - cancel_block() block_address = $086D
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 0)
Cog0
Cog0  * Test #134: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 23, 3_945, 8
Cog0    # files: 8
Cog0    # blocks used: 23
Cog0     -> pass
Cog0
Cog0  * Test #135: Ensure expected file stats
Cog0    File: [rw8KB-C1-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0891] HEAD/more, thisID=18, dataOfs=8, nextId=22, lifeCycle [ACTIVE-5], sig=[$0160_12BD]
Cog0      2: [$08F8] BODY/more, thisID=22, nextId=23, lifeCycle [ACTIVE-5], sig=[$0170_16BF]
Cog0      3: [$0A8B] BODY/last, thisID=23, endPtr=$00A0, lifeCycle [ACTIVE-3], sig=[$0A00_177E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_200, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #136: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 8_200, recordCount = 8, totalRecordsWritten = 12
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #5
Cog0
Cog0  * Test #137: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #138: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #139: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #140: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #141: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C1-blocks.bin, byteCount = 8_200, blockID = 19, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: C2 Append 6KB circular to 8kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(8, start: fils=8, blks=23):
Cog0     size: 0 bytes, 0 records, write [1-8]
Cog0
Cog0  * Test #142: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #143: Write Records
Cog0  * wr_block() block_address = $0AB6, block_id = 19, NextID_EndPtr = $0018
Cog0  - program_block() block_address = $0AB6
Cog0  * wr_block() block_address = $0539, block_id = 24, NextID_EndPtr = $0019
Cog0  - program_block() block_address = $0539
Cog0  - activate_block() block_address = $0539
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #144: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-C2-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0AB6] HEAD/more, thisID=19, dataOfs=0, nextId=24, lifeCycle [erased], sig=[$0180_13FD]
Cog0      2: [$0539] BODY/more, thisID=24, nextId=25, lifeCycle [ACTIVE-3], sig=[$0190_187F]
Cog0      3: [$0000] BODY/last, thisID=25, endPtr=$0098, lifeCycle [erased], sig=[$0980_19F6]  MODIFIED
Cog0
Cog0  * Test #145: Close written file
Cog0  * wr_block() block_address = $0CFD, block_id = 25, NextID_EndPtr = $0098
Cog0  - program_block() block_address = $0CFD
Cog0  - activate_block() block_address = $0CFD
Cog0  - activate_block() block_address = $0AB6
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 8_192 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #146: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 26, 3_942, 9
Cog0    # files: 9
Cog0    # blocks used: 26
Cog0     -> pass
Cog0
Cog0  * Test #147: Ensure expected file stats
Cog0    File: [rw8KB-C2-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0AB6] HEAD/more, thisID=19, dataOfs=0, nextId=24, lifeCycle [ACTIVE-3], sig=[$0180_137D]
Cog0      2: [$0539] BODY/more, thisID=24, nextId=25, lifeCycle [ACTIVE-3], sig=[$0190_187F]
Cog0      3: [$0CFD] BODY/last, thisID=25, endPtr=$0098, lifeCycle [ACTIVE-3], sig=[$0980_197E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_192, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #148: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(6, start: fils=9, blks=26):
Cog0     size: 8_192 bytes, 8 records, write [9-14]
Cog0
Cog0  * Test #149: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #150: Write Records
Cog0  * wr_block() block_address = $0019, block_id = 25, NextID_EndPtr = $001A
Cog0  - program_block() block_address = $0019
Cog0    Sub-Test Results: count=6, Pass: 6, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #151: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-C2-blocks.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$0019] BODY/more, thisID=25, nextId=26, lifeCycle [erased], sig=[$01A0_19FF]
Cog0      2: [$0000] BODY/last, thisID=26, endPtr=$08A0, lifeCycle [erased], sig=[$8A00_1AF6]  MODIFIED
Cog0
Cog0  * Test #152: Close written file
Cog0  * wr_block() block_address = $0603, block_id = 26, NextID_EndPtr = $08A0
Cog0  - program_block() block_address = $0603
Cog0  - activate_block() block_address = $0603
Cog0  - activate_block() block_address = $0019
Cog0  * delChnFmID() [$0CFD] block_id = 25, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0CFD
Cog0  - program_block() block_address = $0AE5
Cog0  - activate_block() block_address = $0AE5
Cog0  - cancel_block() block_address = $0539
Cog0  * froncate(id=19, 8_192) size_in_bytes = 14_336, new_head_block_id = 24, block_offset = $0890(2_192)
Cog0  - header [$0539] thisID=19, nextID=25, sig=[$0190_137D]
Cog0  * program_updated_block() block_address = $0539
Cog0  - program_block() block_address = $0539
Cog0  - activate_block() block_address = $0539
Cog0  * delChnFmID() [$0AB6] block_id = 19, EndID = 24, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0AB6
Cog0  - cancel_block() block_address = $0AE5
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 0)
Cog0
Cog0  * Test #153: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 26, 3_942, 9
Cog0    # files: 9
Cog0    # blocks used: 26
Cog0     -> pass
Cog0
Cog0  * Test #154: Ensure expected file stats
Cog0    File: [rw8KB-C2-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0539] HEAD/more, thisID=19, dataOfs=2_056, nextId=25, lifeCycle [ACTIVE-5], sig=[$0190_13BD]
Cog0      2: [$0019] BODY/more, thisID=25, nextId=26, lifeCycle [ACTIVE-5], sig=[$01A0_19BF]
Cog0      3: [$0603] BODY/last, thisID=26, endPtr=$08A0, lifeCycle [ACTIVE-3], sig=[$8A00_1A7E]
Cog0    # blocks: 3
Cog0    # bytes used: 10_248, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #155: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 10_248, recordCount = 10, totalRecordsWritten = 14
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #7
Cog0
Cog0  * Test #156: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #157: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #158: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #159: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #160: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C1-blocks.bin, byteCount = 8_200, blockID = 19, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C2-blocks.bin, byteCount = 10_248, blockID = 20, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: C3 Append 9KB circular to 8kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(8, start: fils=9, blks=26):
Cog0     size: 0 bytes, 0 records, write [1-8]
Cog0
Cog0  * Test #161: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #162: Write Records
Cog0  * wr_block() block_address = $0330, block_id = 24, NextID_EndPtr = $001B
Cog0  - program_block() block_address = $0330
Cog0  * wr_block() block_address = $01A4, block_id = 27, NextID_EndPtr = $001C
Cog0  - program_block() block_address = $01A4
Cog0  - activate_block() block_address = $01A4
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #163: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-C3-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0330] HEAD/more, thisID=24, dataOfs=0, nextId=27, lifeCycle [erased], sig=[$01B0_18FD]
Cog0      2: [$01A4] BODY/more, thisID=27, nextId=28, lifeCycle [ACTIVE-3], sig=[$01C0_1B7F]
Cog0      3: [$0000] BODY/last, thisID=28, endPtr=$0098, lifeCycle [erased], sig=[$0980_1CF6]  MODIFIED
Cog0
Cog0  * Test #164: Close written file
Cog0  * wr_block() block_address = $0E1C, block_id = 28, NextID_EndPtr = $0098
Cog0  - program_block() block_address = $0E1C
Cog0  - activate_block() block_address = $0E1C
Cog0  - activate_block() block_address = $0330
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 8_192 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #165: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 29, 3_939, 10
Cog0    # files: 10
Cog0    # blocks used: 29
Cog0     -> pass
Cog0
Cog0  * Test #166: Ensure expected file stats
Cog0    File: [rw8KB-C3-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0330] HEAD/more, thisID=24, dataOfs=0, nextId=27, lifeCycle [ACTIVE-3], sig=[$01B0_187D]
Cog0      2: [$01A4] BODY/more, thisID=27, nextId=28, lifeCycle [ACTIVE-3], sig=[$01C0_1B7F]
Cog0      3: [$0E1C] BODY/last, thisID=28, endPtr=$0098, lifeCycle [ACTIVE-3], sig=[$0980_1C7E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_192, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #167: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(9, start: fils=10, blks=29):
Cog0     size: 8_192 bytes, 8 records, write [9-17]
Cog0
Cog0  * Test #168: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #169: Write Records
Cog0  * wr_block() block_address = $0B27, block_id = 28, NextID_EndPtr = $001D
Cog0  - program_block() block_address = $0B27
Cog0  * wr_block() block_address = $0677, block_id = 29, NextID_EndPtr = $001E
Cog0  - program_block() block_address = $0677
Cog0  - activate_block() block_address = $0677
Cog0    Sub-Test Results: count=9, Pass: 9, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #170: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-C3-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0B27] BODY/more, thisID=28, nextId=29, lifeCycle [erased], sig=[$01D0_1CFF]
Cog0      2: [$0677] BODY/more, thisID=29, nextId=30, lifeCycle [ACTIVE-3], sig=[$01E0_1D7F]
Cog0      3: [$0000] BODY/last, thisID=30, endPtr=$04A8, lifeCycle [erased], sig=[$4A80_1EF6]  MODIFIED
Cog0
Cog0  * Test #171: Close written file
Cog0  * wr_block() block_address = $0B40, block_id = 30, NextID_EndPtr = $04A8
Cog0  - program_block() block_address = $0B40
Cog0  - activate_block() block_address = $0B40
Cog0  - activate_block() block_address = $0B27
Cog0  * delChnFmID() [$0E1C] block_id = 28, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0E1C
Cog0  * froncate(id=24, 8_192) size_in_bytes = 17_408, new_head_block_id = 28, block_offset = $0498(1_176)
Cog0  - header [$0A8F] thisID=24, nextID=29, sig=[$01D0_187D]
Cog0  * program_updated_block() block_address = $0A8F
Cog0  - program_block() block_address = $0A8F
Cog0  - activate_block() block_address = $0A8F
Cog0  * delChnFmID() [$0330] block_id = 24, EndID = 28, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0330
Cog0  - cancel_block() block_address = $01A4
Cog0  - cancel_block() block_address = $0B27
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 0)
Cog0
Cog0  * Test #172: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 29, 3_939, 10
Cog0    # files: 10
Cog0    # blocks used: 29
Cog0     -> pass
Cog0
Cog0  * Test #173: Ensure expected file stats
Cog0    File: [rw8KB-C3-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0A8F] HEAD/more, thisID=24, dataOfs=1_040, nextId=29, lifeCycle [ACTIVE-5], sig=[$01D0_18BD]
Cog0      2: [$0677] BODY/more, thisID=29, nextId=30, lifeCycle [ACTIVE-3], sig=[$01E0_1D7F]
Cog0      3: [$0B40] BODY/last, thisID=30, endPtr=$04A8, lifeCycle [ACTIVE-3], sig=[$4A80_1E7E]
Cog0    # blocks: 3
Cog0    # bytes used: 9_232, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #174: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 9_232, recordCount = 9, totalRecordsWritten = 17
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #10
Cog0
Cog0  * Test #175: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #176: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #177: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #178: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #179: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C1-blocks.bin, byteCount = 8_200, blockID = 19, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C2-blocks.bin, byteCount = 10_248, blockID = 20, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C3-blocks.bin, byteCount = 9_232, blockID = 25, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: D1 Append 6KB circular to 11kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(11, start: fils=10, blks=29):
Cog0     size: 0 bytes, 0 records, write [1-11]
Cog0
Cog0  * Test #180: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #181: Write Records
Cog0  * wr_block() block_address = $06C6, block_id = 27, NextID_EndPtr = $001C
Cog0  - program_block() block_address = $06C6
Cog0  * wr_block() block_address = $00F6, block_id = 28, NextID_EndPtr = $001F
Cog0  - program_block() block_address = $00F6
Cog0  - activate_block() block_address = $00F6
Cog0    Sub-Test Results: count=11, Pass: 11, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #182: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw9KB-D1-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$06C6] HEAD/more, thisID=27, dataOfs=0, nextId=28, lifeCycle [erased], sig=[$01C0_1BFD]
Cog0      2: [$00F6] BODY/more, thisID=28, nextId=31, lifeCycle [ACTIVE-3], sig=[$01F0_1C7F]
Cog0      3: [$0000] BODY/last, thisID=31, endPtr=$0C98, lifeCycle [erased], sig=[$C980_1FF6]  MODIFIED
Cog0
Cog0  * Test #183: Close written file
Cog0  * wr_block() block_address = $05B9, block_id = 31, NextID_EndPtr = $0C98
Cog0  - program_block() block_address = $05B9
Cog0  - activate_block() block_address = $05B9
Cog0  - activate_block() block_address = $06C6
Cog0  * froncate(id=27, 8_192) size_in_bytes = 11_264, new_head_block_id = 27, block_offset = $0C88(3_208)
Cog0  - header [$0EB4] thisID=27, nextID=28, sig=[$01C0_1B7D]
Cog0  * program_updated_block() block_address = $0EB4
Cog0  - program_block() block_address = $0EB4
Cog0  - activate_block() block_address = $0EB4
Cog0  * delChnFmID() [$06C6] block_id = 27, EndID = 27, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $06C6
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 11_264 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #184: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 32, 3_936, 11
Cog0    # files: 11
Cog0    # blocks used: 32
Cog0     -> pass
Cog0
Cog0  * Test #185: Ensure expected file stats
Cog0    File: [rw9KB-D1-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0EB4] HEAD/more, thisID=27, dataOfs=3_072, nextId=28, lifeCycle [ACTIVE-5], sig=[$01C0_1BBD]
Cog0      2: [$00F6] BODY/more, thisID=28, nextId=31, lifeCycle [ACTIVE-3], sig=[$01F0_1C7F]
Cog0      3: [$05B9] BODY/last, thisID=31, endPtr=$0C98, lifeCycle [ACTIVE-3], sig=[$C980_1F7E]
Cog0    # blocks: 3
Cog0    # bytes used: 11_264, expectedBytesUsed = 11_264
Cog0     -> pass
Cog0
Cog0  * Test #186: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(6, start: fils=11, blks=32):
Cog0     size: 11_264 bytes, 11 records, write [12-17]
Cog0
Cog0  * Test #187: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #188: Write Records
Cog0  * wr_block() block_address = $0456, block_id = 31, NextID_EndPtr = $0020
Cog0  - program_block() block_address = $0456
Cog0  * wr_block() block_address = $0105, block_id = 32, NextID_EndPtr = $0021
Cog0  - program_block() block_address = $0105
Cog0  - activate_block() block_address = $0105
Cog0    Sub-Test Results: count=6, Pass: 6, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #189: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw9KB-D1-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0456] BODY/more, thisID=31, nextId=32, lifeCycle [erased], sig=[$0200_1FFF]
Cog0      2: [$0105] BODY/more, thisID=32, nextId=33, lifeCycle [ACTIVE-3], sig=[$0210_207F]
Cog0      3: [$0000] BODY/last, thisID=33, endPtr=$04A8, lifeCycle [erased], sig=[$4A80_21F6]  MODIFIED
Cog0
Cog0  * Test #190: Close written file
Cog0  * wr_block() block_address = $0AD7, block_id = 33, NextID_EndPtr = $04A8
Cog0  - program_block() block_address = $0AD7
Cog0  - activate_block() block_address = $0AD7
Cog0  - activate_block() block_address = $0456
Cog0  * delChnFmID() [$05B9] block_id = 31, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $05B9
Cog0  * froncate(id=27, 8_192) size_in_bytes = 14_336, new_head_block_id = 31, block_offset = $0498(1_176)
Cog0  - header [$0B96] thisID=27, nextID=32, sig=[$0200_1BBD]
Cog0  * program_updated_block() block_address = $0B96
Cog0  - program_block() block_address = $0B96
Cog0  - activate_block() block_address = $0B96
Cog0  * delChnFmID() [$0EB4] block_id = 27, EndID = 31, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0EB4
Cog0  - cancel_block() block_address = $00F6
Cog0  - cancel_block() block_address = $0456
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 0)
Cog0
Cog0  * Test #191: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 32, 3_936, 11
Cog0    # files: 11
Cog0    # blocks used: 32
Cog0     -> pass
Cog0
Cog0  * Test #192: Ensure expected file stats
Cog0    File: [rw9KB-D1-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0B96] HEAD/more, thisID=27, dataOfs=1_040, nextId=32, lifeCycle [ACTIVE-6], sig=[$0200_1BDD]
Cog0      2: [$0105] BODY/more, thisID=32, nextId=33, lifeCycle [ACTIVE-3], sig=[$0210_207F]
Cog0      3: [$0AD7] BODY/last, thisID=33, endPtr=$04A8, lifeCycle [ACTIVE-3], sig=[$4A80_217E]
Cog0    # blocks: 3
Cog0    # bytes used: 9_232, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #193: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 9_232, recordCount = 9, totalRecordsWritten = 17
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #10
Cog0
Cog0  * Test #194: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #195: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #196: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #197: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #198: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C1-blocks.bin, byteCount = 8_200, blockID = 19, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C2-blocks.bin, byteCount = 10_248, blockID = 20, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C3-blocks.bin, byteCount = 9_232, blockID = 25, BlocksUsed = 3, @Buff={binary data}
Cog0  rw9KB-D1-blocks.bin, byteCount = 9_232, blockID = 28, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: D2 Append 9KB circular to 11kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(11, start: fils=11, blks=32):
Cog0     size: 0 bytes, 0 records, write [1-11]
Cog0
Cog0  * Test #199: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #200: Write Records
Cog0  * wr_block() block_address = $0DEC, block_id = 28, NextID_EndPtr = $001F
Cog0  - program_block() block_address = $0DEC
Cog0  * wr_block() block_address = $0D00, block_id = 31, NextID_EndPtr = $0022
Cog0  - program_block() block_address = $0D00
Cog0  - activate_block() block_address = $0D00
Cog0    Sub-Test Results: count=11, Pass: 11, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #201: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw9KB-D2-blocks.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0DEC] HEAD/more, thisID=28, dataOfs=0, nextId=31, lifeCycle [erased], sig=[$01F0_1CFD]
Cog0      2: [$0D00] BODY/more, thisID=31, nextId=34, lifeCycle [ACTIVE-3], sig=[$0220_1F7F]
Cog0      3: [$0000] BODY/last, thisID=34, endPtr=$0C98, lifeCycle [erased], sig=[$C980_22F6]  MODIFIED
Cog0
Cog0  * Test #202: Close written file
Cog0  * wr_block() block_address = $04DC, block_id = 34, NextID_EndPtr = $0C98
Cog0  - program_block() block_address = $04DC
Cog0  - activate_block() block_address = $04DC
Cog0  - activate_block() block_address = $0DEC
Cog0  * froncate(id=28, 8_192) size_in_bytes = 11_264, new_head_block_id = 28, block_offset = $0C88(3_208)
Cog0  - header [$04B5] thisID=28, nextID=31, sig=[$01F0_1C7D]
Cog0  * program_updated_block() block_address = $04B5
Cog0  - program_block() block_address = $04B5
Cog0  - activate_block() block_address = $04B5
Cog0  * delChnFmID() [$0DEC] block_id = 28, EndID = 28, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0DEC
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 11_264 bytes, 3 blocks (added 3)
Cog0
Cog0  * Test #203: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 35, 3_933, 12
Cog0    # files: 12
Cog0    # blocks used: 35
Cog0     -> pass
Cog0
Cog0  * Test #204: Ensure expected file stats
Cog0    File: [rw9KB-D2-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$04B5] HEAD/more, thisID=28, dataOfs=3_072, nextId=31, lifeCycle [ACTIVE-5], sig=[$01F0_1CBD]
Cog0      2: [$0D00] BODY/more, thisID=31, nextId=34, lifeCycle [ACTIVE-3], sig=[$0220_1F7F]
Cog0      3: [$04DC] BODY/last, thisID=34, endPtr=$0C98, lifeCycle [ACTIVE-3], sig=[$C980_227E]
Cog0    # blocks: 3
Cog0    # bytes used: 11_264, expectedBytesUsed = 11_264
Cog0     -> pass
Cog0
Cog0  * Test #205: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(9, start: fils=12, blks=35):
Cog0     size: 11_264 bytes, 11 records, write [12-20]
Cog0
Cog0  * Test #206: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #207: Write Records
Cog0  * wr_block() block_address = $0928, block_id = 34, NextID_EndPtr = $0023
Cog0  - program_block() block_address = $0928
Cog0  * wr_block() block_address = $0464, block_id = 35, NextID_EndPtr = $0024
Cog0  - program_block() block_address = $0464
Cog0  - activate_block() block_address = $0464
Cog0  * wr_block() block_address = $047F, block_id = 36, NextID_EndPtr = $0025
Cog0  - program_block() block_address = $047F
Cog0  - activate_block() block_address = $047F
Cog0    Sub-Test Results: count=9, Pass: 9, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #208: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw9KB-D2-blocks.bin] pending commit
Cog0    # 4 Blocks in chain:
Cog0      1: [$0928] BODY/more, thisID=34, nextId=35, lifeCycle [erased], sig=[$0230_22FF]
Cog0      2: [$0464] BODY/more, thisID=35, nextId=36, lifeCycle [ACTIVE-3], sig=[$0240_237F]
Cog0      3: [$047F] BODY/more, thisID=36, nextId=37, lifeCycle [ACTIVE-3], sig=[$0250_247F]
Cog0      4: [$0000] BODY/last, thisID=37, endPtr=$00B0, lifeCycle [erased], sig=[$0B00_25F6]  MODIFIED
Cog0
Cog0  * Test #209: Close written file
Cog0  * wr_block() block_address = $0626, block_id = 37, NextID_EndPtr = $00B0
Cog0  - program_block() block_address = $0626
Cog0  - activate_block() block_address = $0626
Cog0  - activate_block() block_address = $0928
Cog0  * delChnFmID() [$04DC] block_id = 34, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $04DC
Cog0  * froncate(id=28, 8_192) size_in_bytes = 17_408, new_head_block_id = 35, block_offset = $00A0(160)
Cog0  - header [$0DB5] thisID=28, nextID=36, sig=[$0240_1CBD]
Cog0  * program_updated_block() block_address = $0DB5
Cog0  - program_block() block_address = $0DB5
Cog0  - activate_block() block_address = $0DB5
Cog0  * delChnFmID() [$04B5] block_id = 28, EndID = 35, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $04B5
Cog0  - cancel_block() block_address = $0D00
Cog0  - cancel_block() block_address = $0928
Cog0  - cancel_block() block_address = $0464
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 8_192 bytes, 3 blocks (added 0)
Cog0
Cog0  * Test #210: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 35, 3_933, 12
Cog0    # files: 12
Cog0    # blocks used: 35
Cog0     -> pass
Cog0
Cog0  * Test #211: Ensure expected file stats
Cog0    File: [rw9KB-D2-blocks.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0DB5] HEAD/more, thisID=28, dataOfs=24, nextId=36, lifeCycle [ACTIVE-6], sig=[$0240_1CDD]
Cog0      2: [$047F] BODY/more, thisID=36, nextId=37, lifeCycle [ACTIVE-3], sig=[$0250_247F]
Cog0      3: [$0626] BODY/last, thisID=37, endPtr=$00B0, lifeCycle [ACTIVE-3], sig=[$0B00_257E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_216, expectedBytesUsed = 8_192
Cog0     -> pass
Cog0
Cog0  * Test #212: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifyRecords(): file size lenBytes = 8_216, recordCount = 8, totalRecordsWritten = 20
Cog0     (Circular Buffer limit is 8 records)
Cog0     Read should start with record #13
Cog0
Cog0  * Test #213: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #214: read expected RECORDs
Cog0    Sub-Test Results: count=8, Pass: 8, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #215: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #216: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #217: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C1-blocks.bin, byteCount = 8_200, blockID = 19, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C2-blocks.bin, byteCount = 10_248, blockID = 20, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C3-blocks.bin, byteCount = 9_232, blockID = 25, BlocksUsed = 3, @Buff={binary data}
Cog0  rw9KB-D1-blocks.bin, byteCount = 9_232, blockID = 28, BlocksUsed = 3, @Buff={binary data}
Cog0  rw9KB-D2-blocks.bin, byteCount = 8_216, blockID = 29, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: E1 Append 3.4kb circular to 4.0kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(12, start: fils=12, blks=35):
Cog0     size: 0 bytes, 0 records, write [1-12]
Cog0
Cog0  * Test #218: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #219: Write Records
Cog0  * wr_block() block_address = $0D5B, block_id = 31, NextID_EndPtr = $0022
Cog0  - program_block() block_address = $0D5B
Cog0    Sub-Test Results: count=12, Pass: 12, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #220: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-E1-blocks.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$0D5B] HEAD/more, thisID=31, dataOfs=0, nextId=34, lifeCycle [erased], sig=[$0220_1FFD]
Cog0      2: [$0928] BODY/last, thisID=34, endPtr=$0050, lifeCycle [erased], sig=[$0500_22F6]  MODIFIED
Cog0
Cog0  * Test #221: Close written file
Cog0  * wr_block() block_address = $075F, block_id = 34, NextID_EndPtr = $0050
Cog0  - program_block() block_address = $075F
Cog0  - activate_block() block_address = $075F
Cog0  - activate_block() block_address = $0D5B
Cog0  * froncate(id=31, 3_360) size_in_bytes = 4_032, new_head_block_id = 31, block_offset = $0328(808)
Cog0  - header [$058B] thisID=31, nextID=34, sig=[$0220_1F7D]
Cog0  * program_updated_block() block_address = $058B
Cog0  - program_block() block_address = $058B
Cog0  - activate_block() block_address = $058B
Cog0  * delChnFmID() [$0D5B] block_id = 31, EndID = 31, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0D5B
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 3_360 bytes, 2 blocks (added 2)
Cog0
Cog0  * Test #222: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 37, 3_931, 13
Cog0    # files: 13
Cog0    # blocks used: 37
Cog0     -> pass
Cog0
Cog0  * Test #223: Ensure expected file stats
Cog0    File: [rw8KB-E1-blocks.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$058B] HEAD/more, thisID=31, dataOfs=672, nextId=34, lifeCycle [ACTIVE-5], sig=[$0220_1FBD]
Cog0      2: [$075F] BODY/last, thisID=34, endPtr=$0050, lifeCycle [ACTIVE-3], sig=[$0500_227E]
Cog0    # blocks: 2
Cog0    # bytes used: 4_032, expectedBytesUsed = 3_360
Cog0     -> pass
Cog0
Cog0  * Test #224: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifySecRecords(): file size lenBytes = 4_032, recordCount = 12, totalRecordsWritten = 12
Cog0     (Circular Buffer limit is 10 records)
Cog0     Read should start with record #3
Cog0
Cog0  * Test #225: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #226: read expected SEC RECORDs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #227: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #228: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #229: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #230: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(10, start: fils=13, blks=37):
Cog0     size: 4_032 bytes, 12 records, write [13-22]
Cog0
Cog0  * Test #231: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #232: Write Records
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #233: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-E1-blocks.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] BODY/last, thisID=34, endPtr=$0D70, lifeCycle [ACTIVE-3], sig=[$D700_2276]  MODIFIED
Cog0
Cog0  * Test #234: Close written file
Cog0  * wr_block() block_address = $0A84, block_id = 34, NextID_EndPtr = $0D70
Cog0  - program_block() block_address = $0A84
Cog0  - activate_block() block_address = $0A84
Cog0  * delChnFmID() [$075F] block_id = 34, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $075F
Cog0  * froncate(id=31, 3_360) size_in_bytes = 6_720, new_head_block_id = 34, block_offset = $0050(80)
Cog0  * froncate(id=31, 3_360) size_in_bytes = 6_720, AWAKEN PRIOR HEAD prior_block_id = 31
Cog0  - header [$095D] thisID=31, nextID=34, sig=[$0220_1FBD]
Cog0  * program_updated_block() block_address = $095D
Cog0  - program_block() block_address = $095D
Cog0  - activate_block() block_address = $095D
Cog0  * delChnFmID() [$058B] block_id = 31, EndID = 31, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $058B
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 3_360 bytes, 2 blocks (added 0)
Cog0
Cog0  * Test #235: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 37, 3_931, 13
Cog0    # files: 13
Cog0    # blocks used: 37
Cog0     -> pass
Cog0
Cog0  * Test #236: Ensure expected file stats
Cog0    File: [rw8KB-E1-blocks.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$095D] HEAD/more, thisID=31, dataOfs=4_032, nextId=34, lifeCycle [ACTIVE-6], sig=[$0220_1FDD]
Cog0      2: [$0A84] BODY/last, thisID=34, endPtr=$0D70, lifeCycle [ACTIVE-5], sig=[$D700_22BE]
Cog0    # blocks: 2
Cog0    # bytes used: 7_392, expectedBytesUsed = 3_360
Cog0     -> pass
Cog0
Cog0  * Test #237: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifySecRecords(): file size lenBytes = 7_392, recordCount = 22, totalRecordsWritten = 22
Cog0     (Circular Buffer limit is 10 records)
Cog0     Read should start with record #13
Cog0
Cog0  * Test #238: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #239: read expected SEC RECORDs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #240: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #241: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #242: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: E2 Append 3.4kb circular to 4.8kb file
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(12, start: fils=13, blks=37):
Cog0     size: 0 bytes, 0 records, write [1-12]
Cog0
Cog0  * Test #243: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #244: Write Records
Cog0  * wr_block() block_address = $00E7, block_id = 35, NextID_EndPtr = $0026
Cog0  - program_block() block_address = $00E7
Cog0    Sub-Test Results: count=12, Pass: 12, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #245: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-E2-blocks.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$00E7] HEAD/more, thisID=35, dataOfs=0, nextId=38, lifeCycle [erased], sig=[$0260_23FD]
Cog0      2: [$0000] BODY/last, thisID=38, endPtr=$0050, lifeCycle [erased], sig=[$0500_26F6]  MODIFIED
Cog0
Cog0  * Test #246: Close written file
Cog0  * wr_block() block_address = $012E, block_id = 38, NextID_EndPtr = $0050
Cog0  - program_block() block_address = $012E
Cog0  - activate_block() block_address = $012E
Cog0  - activate_block() block_address = $00E7
Cog0  * froncate(id=35, 3_360) size_in_bytes = 4_032, new_head_block_id = 35, block_offset = $0328(808)
Cog0  - header [$0363] thisID=35, nextID=38, sig=[$0260_237D]
Cog0  * program_updated_block() block_address = $0363
Cog0  - program_block() block_address = $0363
Cog0  - activate_block() block_address = $0363
Cog0  * delChnFmID() [$00E7] block_id = 35, EndID = 35, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $00E7
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Wrote new file: size 3_360 bytes, 2 blocks (added 2)
Cog0
Cog0  * Test #247: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 39, 3_929, 14
Cog0    # files: 14
Cog0    # blocks used: 39
Cog0     -> pass
Cog0
Cog0  * Test #248: Ensure expected file stats
Cog0    File: [rw8KB-E2-blocks.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$0363] HEAD/more, thisID=35, dataOfs=672, nextId=38, lifeCycle [ACTIVE-5], sig=[$0260_23BD]
Cog0      2: [$012E] BODY/last, thisID=38, endPtr=$0050, lifeCycle [ACTIVE-3], sig=[$0500_267E]
Cog0    # blocks: 2
Cog0    # bytes used: 4_032, expectedBytesUsed = 3_360
Cog0     -> pass
Cog0
Cog0  * Test #249: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testAppendRecords(22, start: fils=14, blks=39):
Cog0     size: 4_032 bytes, 12 records, write [13-34]
Cog0
Cog0  * Test #250: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #251: Write Records
Cog0  * wr_block() block_address = $0125, block_id = 38, NextID_EndPtr = $0027
Cog0  - program_block() block_address = $0125
Cog0    Sub-Test Results: count=22, Pass: 22, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #252: ensure no errors on Record writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw8KB-E2-blocks.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$0125] BODY/more, thisID=38, nextId=39, lifeCycle [erased], sig=[$0270_26FF]
Cog0      2: [$0000] BODY/last, thisID=39, endPtr=$0D38, lifeCycle [erased], sig=[$D380_27F6]  MODIFIED
Cog0
Cog0  * Test #253: Close written file
Cog0  * wr_block() block_address = $0344, block_id = 39, NextID_EndPtr = $0D38
Cog0  - program_block() block_address = $0344
Cog0  - activate_block() block_address = $0344
Cog0  - activate_block() block_address = $0125
Cog0  * delChnFmID() [$012E] block_id = 38, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $012E
Cog0  * froncate(id=35, 3_360) size_in_bytes = 10_752, new_head_block_id = 39, block_offset = $0018(24)
Cog0  * froncate(id=35, 3_360) size_in_bytes = 10_752, AWAKEN PRIOR HEAD prior_block_id = 38
Cog0  - header [$0A01] thisID=35, nextID=39, sig=[$0270_23BD]
Cog0  * program_updated_block() block_address = $0A01
Cog0  - program_block() block_address = $0A01
Cog0  - activate_block() block_address = $0A01
Cog0  * delChnFmID() [$0363] block_id = 35, EndID = 38, delete_mode = 1, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $0363
Cog0  - cancel_block() block_address = $0125
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  **** Appended to existing file, now: size 3_360 bytes, 2 blocks (added 0)
Cog0
Cog0  * Test #254: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 39, 3_929, 14
Cog0    # files: 14
Cog0    # blocks used: 39
Cog0     -> pass
Cog0
Cog0  * Test #255: Ensure expected file stats
Cog0    File: [rw8KB-E2-blocks.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$0A01] HEAD/more, thisID=35, dataOfs=3_976, nextId=39, lifeCycle [ACTIVE-6], sig=[$0270_23DD]
Cog0      2: [$0344] BODY/last, thisID=39, endPtr=$0D38, lifeCycle [ACTIVE-3], sig=[$D380_277E]
Cog0    # blocks: 2
Cog0    # bytes used: 7_336, expectedBytesUsed = 3_360
Cog0     -> pass
Cog0
Cog0  * Test #256: Determine size of file in records
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0   ------------------
Cog0  ENTRY testVerifySecRecords(): file size lenBytes = 7_336, recordCount = 21, totalRecordsWritten = 34
Cog0     (Circular Buffer limit is 10 records)
Cog0     Read should start with record #25
Cog0
Cog0  * Test #257: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #258: read expected SEC RECORDs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #259: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #260: BAD: read one more Record than written
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #261: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw0KB-A1-blocks.bin, byteCount = 6_144, blockID = 1, BlocksUsed = 2, @Buff={binary data}
Cog0  rw0KB-A2-blocks.bin, byteCount = 8_192, blockID = 3, BlocksUsed = 3, @Buff={binary data}
Cog0  rw0KB-A3-blocks.bin, byteCount = 8_200, blockID = 6, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B1-blocks.bin, byteCount = 8_192, blockID = 7, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B2-blocks.bin, byteCount = 11_264, blockID = 12, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B3-blocks.bin, byteCount = 10_248, blockID = 15, BlocksUsed = 3, @Buff={binary data}
Cog0  rw3KB-B4-blocks.bin, byteCount = 9_232, blockID = 16, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C1-blocks.bin, byteCount = 8_200, blockID = 19, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C2-blocks.bin, byteCount = 10_248, blockID = 20, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-C3-blocks.bin, byteCount = 9_232, blockID = 25, BlocksUsed = 3, @Buff={binary data}
Cog0  rw9KB-D1-blocks.bin, byteCount = 9_232, blockID = 28, BlocksUsed = 3, @Buff={binary data}
Cog0  rw9KB-D2-blocks.bin, byteCount = 8_216, blockID = 29, BlocksUsed = 3, @Buff={binary data}
Cog0  rw8KB-E1-blocks.bin, byteCount = 7_392, blockID = 32, BlocksUsed = 2, @Buff={binary data}
Cog0  rw8KB-E2-blocks.bin, byteCount = 7_336, blockID = 36, BlocksUsed = 2, @Buff={binary data}
Cog0
Cog0  * Test #262: Unmount Flash
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * 262 Tests - Pass: 262, Fail: 0
Cog0  * Test Complete
