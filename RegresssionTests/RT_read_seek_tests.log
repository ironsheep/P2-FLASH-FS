Cog0  INIT $0000_0000 $0000_0000 load
Cog0  INIT $0000_0EB8 $0000_AB08 jump
Cog0  blocksUsed = 0, blocksFree = 3_968, fileCount = 0
Cog0
Cog0    All Files:
Cog0
Cog0  * Test #1: BAD: Read when file doesn't exist
Cog0     ECode: E_FILE_NOT_FOUND: File not present
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only - filled with longs
Cog0
Cog0  * Test #2: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #3: BAD: seek on write-only file
Cog0     ECode: E_FILE_MODE: file not opened in desired mode
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #4: Write N of longs
Cog0    Sub-Test Results: Pass: 989, Fail: 0
Cog0
Cog0  * Test #5: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=0, endPtr=$0FFC, lifeCycle [erased], sig=[$FFC0_00FC]
Cog0
Cog0  * Test #6: Close written file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs.bin], bytesUsed = 3_956, bytes_free = 0, block_count = 1
Cog0
Cog0  * Test #7: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 1, 3_967, 1
Cog0    # files: 1
Cog0    # blocks used: 1
Cog0     -> pass
Cog0
Cog0  * Test #8: Ensure expected file stats
Cog0    File: [seekLongs.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$0845] HEAD/last, thisID=0, endPtr=$0FFC, lifeCycle [ACTIVE-3], sig=[$FFC0_007C]
Cog0    # blocks: 1
Cog0    # bytes used: 3_956
Cog0     -> pass
Cog0
Cog0  * Test #9: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #10: read 1st LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #11: ensure no errors on read 1st
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #12: read 20 longs randomly ensure offset is value of LONG
Cog0    Sub-Test Results: Pass: 40, Fail: 0
Cog0
Cog0  * Test #13: ensure no errors on read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #14: read last LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #15: ensure no errors on read last
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #16: BAD: see beyond end of file
Cog0     ECode: E_FILE_SEEK: Attempted seek past either end of file
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #17: Close file we were reading
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block + body block - head full, body has 2 longs
Cog0
Cog0  * Test #18: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #19: BAD: seek on write-only file
Cog0     ECode: E_FILE_MODE: file not opened in desired mode
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #20: Write N of longs
Cog0    Sub-Test Results: Pass: 991, Fail: 0
Cog0
Cog0  * Test #21: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs2blk.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$0794] HEAD/more, thisID=1, nextId=2, lifeCycle [erased], sig=[$0020_01FD]
Cog0      2: [$0000] BODY/last, thisID=2, endPtr=$000C, lifeCycle [erased], sig=[$00C0_02FE]
Cog0
Cog0  * Test #22: Close written file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs2blk.bin], bytesUsed = 3_964, bytes_free = 4_080, block_count = 2
Cog0
Cog0  * Test #23: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 3, 3_965, 2
Cog0    # files: 2
Cog0    # blocks used: 3
Cog0     -> pass
Cog0
Cog0  * Test #24: Ensure expected file stats
Cog0    File: [seekLongs2blk.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$0794] HEAD/more, thisID=1, nextId=2, lifeCycle [ACTIVE-3], sig=[$0020_017D]
Cog0      2: [$0743] BODY/last, thisID=2, endPtr=$000C, lifeCycle [ACTIVE-3], sig=[$00C0_027E]
Cog0    # blocks: 2
Cog0    # bytes used: 3_964
Cog0     -> pass
Cog0
Cog0  * Test #25: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #26: read 1st LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #27: ensure no errors on read 1st
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #28: read 20 longs randomly ensure offset is value of LONG
Cog0    Sub-Test Results: Pass: 40, Fail: 0
Cog0
Cog0  * Test #29: ensure no errors on read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #30: read last LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #31: ensure no errors on read last
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #32: BAD: see beyond end of file
Cog0     ECode: E_FILE_SEEK: Attempted seek past either end of file
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #33: Close file we were reading
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block + 2x body block - head full, body full, 2nd body has 2 longs
Cog0
Cog0  * Test #34: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #35: BAD: seek on write-only file
Cog0     ECode: E_FILE_MODE: file not opened in desired mode
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #36: Write N of longs
Cog0    Sub-Test Results: Pass: 2_013, Fail: 0
Cog0
Cog0  * Test #37: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs3blk.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0645] HEAD/more, thisID=3, nextId=4, lifeCycle [erased], sig=[$0040_03FD]
Cog0      2: [$0E10] BODY/more, thisID=4, nextId=5, lifeCycle [ACTIVE-3], sig=[$0050_047F]
Cog0      3: [$0000] BODY/last, thisID=5, endPtr=$000C, lifeCycle [erased], sig=[$00C0_05FE]
Cog0
Cog0  * Test #38: Close written file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs3blk.bin], bytesUsed = 8_052, bytes_free = 4_080, block_count = 3
Cog0
Cog0  * Test #39: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 6, 3_962, 3
Cog0    # files: 3
Cog0    # blocks used: 6
Cog0     -> pass
Cog0
Cog0  * Test #40: Ensure expected file stats
Cog0    File: [seekLongs3blk.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0645] HEAD/more, thisID=3, nextId=4, lifeCycle [ACTIVE-3], sig=[$0040_037D]
Cog0      2: [$0E10] BODY/more, thisID=4, nextId=5, lifeCycle [ACTIVE-3], sig=[$0050_047F]
Cog0      3: [$07C9] BODY/last, thisID=5, endPtr=$000C, lifeCycle [ACTIVE-3], sig=[$00C0_057E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_052
Cog0     -> pass
Cog0
Cog0  * Test #41: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #42: read 1st LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #43: ensure no errors on read 1st
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #44: read 20 longs randomly ensure offset is value of LONG
Cog0    Sub-Test Results: Pass: 40, Fail: 0
Cog0
Cog0  * Test #45: ensure no errors on read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #46: read last LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #47: ensure no errors on read last
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #48: BAD: see beyond end of file
Cog0     ECode: E_FILE_SEEK: Attempted seek past either end of file
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #49: Close file we were reading
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block + 2x body block - all blocks full
Cog0
Cog0  * Test #50: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #51: BAD: seek on write-only file
Cog0     ECode: E_FILE_MODE: file not opened in desired mode
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #52: Write N of longs
Cog0    Sub-Test Results: Pass: 3_033, Fail: 0
Cog0
Cog0  * Test #53: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs3blkFull.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$00EC] HEAD/more, thisID=6, nextId=7, lifeCycle [erased], sig=[$0070_06FD]
Cog0      2: [$0637] BODY/more, thisID=7, nextId=8, lifeCycle [ACTIVE-3], sig=[$0080_077F]
Cog0      3: [$0000] BODY/last, thisID=8, endPtr=$0FFC, lifeCycle [erased], sig=[$FFC0_08FE]
Cog0
Cog0  * Test #54: Close written file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [seekLongs3blkFull.bin], bytesUsed = 12_132, bytes_free = 0, block_count = 3
Cog0
Cog0  * Test #55: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 9, 3_959, 4
Cog0    # files: 4
Cog0    # blocks used: 9
Cog0     -> pass
Cog0
Cog0  * Test #56: Ensure expected file stats
Cog0    File: [seekLongs3blkFull.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$00EC] HEAD/more, thisID=6, nextId=7, lifeCycle [ACTIVE-3], sig=[$0070_067D]
Cog0      2: [$0637] BODY/more, thisID=7, nextId=8, lifeCycle [ACTIVE-3], sig=[$0080_077F]
Cog0      3: [$048F] BODY/last, thisID=8, endPtr=$0FFC, lifeCycle [ACTIVE-3], sig=[$FFC0_087E]
Cog0    # blocks: 3
Cog0    # bytes used: 12_132
Cog0     -> pass
Cog0
Cog0  * Test #57: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #58: read 1st LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #59: ensure no errors on read 1st
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #60: read 20 longs randomly ensure offset is value of LONG
Cog0    Sub-Test Results: Pass: 40, Fail: 0
Cog0
Cog0  * Test #61: ensure no errors on read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #62: read last LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #63: ensure no errors on read last
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #64: BAD: see beyond end of file
Cog0     ECode: E_FILE_SEEK: Attempted seek past either end of file
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #65: Close file we were reading
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Seek position-relative tests
Cog0
Cog0  * Test #66: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #67: read 1st LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #68: ensure no errors on read 1st
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #69: read 10 longs seeking relative to current location
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 11, Fail: 0
Cog0
Cog0  * Test #70: ensure no errors on read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #71: read last LONG
Cog0    Sub-Test Results: Pass: 2, Fail: 0
Cog0
Cog0  * Test #72: ensure no errors on read last
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #73: BAD: seek beyond end of file
Cog0     ECode: E_FILE_SEEK: Attempted seek past either end of file
Cog0     -> pass
Cog0    Sub-Test Results: Pass: 1, Fail: 0
Cog0
Cog0  * Test #74: Close file we were reading
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: New file_size for handle and max seek tests
Cog0
Cog0  * Test #75: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #76: Determine size of file (by handle) in bytes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #77: Determine size of file (by name) in bytes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #78: Ensure the sizes match
Cog0    Result: 12_132
Cog0     -> pass
Cog0
Cog0  * Test #79: Seek to end of file returning position and ckeck length returned is file size
Cog0    Result: 12_132
Cog0     -> pass
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #80: Close file we were reading
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  seekLongs.bin, Bytes = 3_956, ID = 1, @Buff={binary data}
Cog0  seekLongs2blk.bin, Bytes = 3_964, ID = 2, @Buff={binary data}
Cog0  seekLongs3blk.bin, Bytes = 8_052, ID = 4, @Buff={binary data}
Cog0  seekLongs3blkFull.bin, Bytes = 12_132, ID = 7, @Buff={binary data}
Cog0
Cog0  * 80 Tests: , Pass: 97, Fail: 0
Cog0  * Test Complete
