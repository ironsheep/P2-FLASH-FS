'' =================================================================================================
''
''   File....... RT_read_seek_tests.spin2
''   Purpose.... This object exercises the read and seek behaviors of the flash filesystem
''   Author..... Stephen M Moraco
''               -- see below for terms of use
''   E-mail.....stephen@ironsheep.biz
''   Started.... AUG 2023
''   Updated.... 08 SEP 2023
''
'' =================================================================================================

CON

     _CLKFREQ        = 320_000_000

'{
    ' debug via serial to RPi (using RPi gateway pins)
    DEBUG_PIN_TX = 57
    DEBUG_PIN_RX = 56
    DEBUG_BAUD = 2_000_000
'}

OBJ
    Flash : "Draft_flash_fs"
    utils : "RT_utilities"

DAT

testfile            byte    "seekLongs.bin", 0
testfile2           byte    "seekLongs2blk.bin", 0
testfile3           byte    "seekLongs3blk.bin", 0
testfile4           byte    "seekLongs3blkFull.bin", 0

pBlock              long    0
expectedFileSize    long    0
status              long    0
handle              long    0
longValue           long    0
byteOffset          long    0
fileSizeBlocks      long    0

PUB go() | nbrLongs

    status := Flash.format()      ' Comment out this line to not erase all files
    if status < 0
        utils.showError(@"format()", status)
        return

    status := Flash.mount()
    if status < 0
        utils.showError(@"mount()", status)
        return

    utils.ShowStats()                   ' should have empty filesystem
    utils.showFiles()

    utils.startTest(@"BAD: Read when file doesn't exist")
    handle := Flash.open(@testfile,"r")
    utils.evaluate(handle, Flash.E_FILE_NOT_FOUND)

    ' fill head block with longs (only block file)
    utils.startTestGroup(@"Head block only - filled with longs")
    nbrLongs := Flash.LONGS_IN_HEAD_BLOCK
    writeAddressedLongs(@testfile, nbrLongs, 0, 0)
    VerifyAddressedLongs(@testfile, nbrLongs)

    ' fill head block + 2 longs with longs (2 block file)
    utils.startTestGroup(@"Head block + body block - head full, body has 2 longs")
    nbrLongs := Flash.LONGS_IN_HEAD_BLOCK + 2
    writeAddressedLongs(@testfile2, nbrLongs, 1, 1)
    VerifyAddressedLongs(@testfile2, nbrLongs)

    ' fill head block + body block + 2 longs with longs (3 block file)
    utils.startTestGroup(@"Head block + 2x body block - head full, body full, 2nd body has 2 longs")
    nbrLongs := Flash.LONGS_IN_HEAD_BLOCK + Flash.LONGS_IN_BODY_BLOCK + 2
    writeAddressedLongs(@testfile3, nbrLongs, 2, 3)
    VerifyAddressedLongs(@testfile3, nbrLongs)

     ' fill head block + 2x body block with longs (full 3 block file)
    utils.startTestGroup(@"Head block + 2x body block - all blocks full")
    nbrLongs := Flash.LONGS_IN_HEAD_BLOCK + (Flash.LONGS_IN_BODY_BLOCK * 2)
    writeAddressedLongs(@testfile4, nbrLongs, 3, 6)
    VerifyAddressedLongs(@testfile4, nbrLongs)

    utils.showFiles()

    'utils.dumpFileHeads()

    utils.ShowTestEndCounts()

    debug("* Test Complete")


pri writeAddressedLongs(pFilename, count, startingFileCount, startingBlockCount) | dumpSize
    ' ----------------------------------
    ' TEST
    '  open file for read
    '  ensure returns error (doesn't exist)
    '  open file for write
    '  ensure returns SUCCESS
    utils.startTest(@"Open File for write")
    handle := Flash.open(pFilename,"w")
    utils.evaluate(handle, Flash.SUCCESS)

    '  attempt seek and verify that seek on write-only file returns error
    utils.startTest(@"BAD: seek on write-only file")
    status := Flash.seek(handle, 0)
    utils.evaluate(status, Flash.E_FILE_MODE)

    '  write a fixed length file of longs where value of long is offset into file
    expectedFileSize := 0
    utils.startTest(@"Write N of longs")
    repeat longValue from 0 to count - 1
        status := Flash.wr_long(handle, longValue)
        expectedFileSize += 4
        utils.evaluateStatus(status, @"wr_long()", Flash.SUCCESS)

    utils.startTest(@"ensure no errors on writes")
    utils.evaluate(status, Flash.SUCCESS)

    '  dump commit chain
    utils.showPendingCommitChain(handle)

    '  close file
    utils.startTest(@"Close written file")
    status := Flash.close(handle)
    utils.evaluate(status, Flash.SUCCESS)

    utils.showFileDetails(pFilename)


    dumpSize := expectedFileSize
    if count > Flash.LONGS_IN_HEAD_BLOCK + Flash.LONGS_IN_BODY_BLOCK
        dumpSize -= (Flash.LONGS_IN_HEAD_BLOCK * 4) + (Flash.LONGS_IN_BODY_BLOCK * 4)
    elseif count > Flash.LONGS_IN_HEAD_BLOCK
        dumpSize -= Flash.LONGS_IN_HEAD_BLOCK * 4
    ' show whole block if head block
    if expectedFileSize ==Flash.LONGS_IN_HEAD_BLOCK * 4
        dumpSize := 4096

    '  get filesystem stats and verify against expectation
    fileSizeBlocks := utils.blockCountForFileSize(expectedFileSize)
    utils.startTest(@"Ensure expected file system changes")
    utils.evaluateFSStats(@"post file write", startingFileCount+1, startingBlockCount+fileSizeBlocks)

    '  get single file stats and verify against expectation
    utils.startTest(@"Ensure expected file stats")
    utils.evaluateFileStats(pFilename, fileSizeBlocks, expectedFileSize)

    {
    ' AUGH dump head block to see if content is correct
    pBlock := Flash.TEST_getTail4kBlock(pFilename)
    ' reuse status for a minute
    status := dumpSize  & $FFFF_FFF0            ' ensure muiple of 16 bytes (if in head show name)
    utils.dbgMemDump(@"Longs file Tail block", pBlock, status)
    status := Flash.SUCCESS ' clear our temp use
    '}



pri VerifyAddressedLongs(pFilename, count)
    '  open file for read
    utils.startTest(@"Open File for read")
    handle := Flash.open(pFilename,"r")
    utils.evaluate(handle, Flash.SUCCESS)

    '    seek to various locations and read longs validating for correct value
    utils.startTest(@"read 1st long")
        status := Flash.seek(handle, 0)
        if status == Flash.SUCCESS
            longValue := Flash.rd_long(handle)
            status := Flash.error()
            utils.evaluateValue(longValue, @"rd_long", 0)
    utils.startTest(@"ensure no errors on read 1st")
    utils.evaluate(status, Flash.SUCCESS)

    utils.startTest(@"read 20 longs randomly ensure offset is value of long")
    repeat 20
        byteOffset := (GETRND() +// count) * 4
        'debug("  Offset: ", udec_(byteOffset), " (", udec_(byteOffset / 4), " of ", udec_(count), ")")
        status := Flash.seek(handle, byteOffset)
        if status < 0
            quit
        longValue := Flash.rd_long(handle)
        status := Flash.error()
        if status < 0
            quit
        utils.evaluateValue(longValue, @"rd_long", byteOffset / 4)
    utils.startTest(@"ensure no errors on read")
    utils.evaluate(status, Flash.SUCCESS)

    utils.startTest(@"read last long")
    status := Flash.seek(handle, (count - 1) * 4)
    if status == Flash.SUCCESS
        longValue := Flash.rd_long(handle)
        status := Flash.error()
        utils.evaluateValue(longValue, @"rd_long", count - 1)
    utils.startTest(@"ensure no errors on read last")
    utils.evaluate(status, Flash.SUCCESS)

    '  seek past end of file to verify seek returns error
    utils.startTest(@"BAD: see beyond end of file")
    status := Flash.seek(handle, (count + 2) * 4)
    utils.evaluate(status, Flash.E_FILE_SEEK)

    '  close file
    utils.startTest(@"Close file we were reading")
    status := Flash.close(handle)
    utils.evaluate(status, Flash.SUCCESS)

con { license }

{{
  =================================================================================================

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  =================================================================================================
}}
