'' =================================================================================================
''
''   File....... UT_utilites.spin2
''   Purpose.... This object exercises the
''   Author..... Stephen M Moraco
''               -- see below for terms of use
''   E-mail.....stephen@ironsheep.biz
''   Started.... AUG 2023
''   Updated.... 25 AUG 2023
''
'' =================================================================================================

CON


OBJ
    Flash : "Draft_flash_fs"

DAT { test stats vars }

'---+-----------+---+---+---+-------------------+---+---+---+---+---+-----------+
    numberTests     LONG    0
    passCount       LONG    0
    failCount       LONG    0
    passCountSub    LONG    0
    failCountSub    LONG    0

PUB startTest(pDesciption) | pPassFail, ecGot, ecExpected
    if failCountSub <> 0 or passCountSub <> 0
        debug("  Sub-Test Results: Pass: ", udec_(passCountSub), ", Fail: ", udec_(failCountSub))
        if failCountSub <> 0
            failCount++
        else
            passCount++
        passCountSub := 0
        failCountSub := 0
    numberTests++
    debug(" ")  ' blank line
    debug("* Test #", udec_(numberTests), ": ", zstr_(pDesciption))

PUB ShowTestEndCounts()
    debug(" ")  ' blank line
    debug("* ", udec_(numberTests), " Tests: , Pass: ", udec_(passCount), ", Fail: ", udec_(failCount))

PUB evaluate(result, expectedResult) | pPassFail, ecGot, ecExpected
    ecGot := Flash.string_for_error(result)
    ecExpected := Flash.string_for_error(expectedResult)
    if result <> expectedResult
        debug("   ECode: ", zstr_(ecGot), " (expected ", zstr_(ecExpected), ")")
        failCount++
    else
        debug("   ECode: ", zstr_(ecGot))
        passCount++
    pPassFail := result <> expectedResult ? @"FAIL" : @"pass"
    debug("   -> ", zstr_(pPassFail))

PUB evaluateStatus(result, pMessage, expectedResult) | pPassFail, ecGot, ecExpected, bPassed
    ecGot := Flash.string_for_error(result)
    ecExpected := Flash.string_for_error(expectedResult)
    bPassed := result == expectedResult
    if result <> expectedResult
        failCountSub++
    else
        passCountSub++
    pPassFail := !bPassed ? @"FAIL" : @"pass"
    if !bPassed
        if result <> expectedResult
            debug("  Status: ", zstr_(result), "(", sdec_(result), "),  (expected ", zstr_(expectedResult), "(", sdec_(expectedResult), "))")
        else
            debug("  Status: ", zstr_(result), "(", sdec_(result), ")")
        debug("   -> ", zstr_(pPassFail))

PUB evaluateValue(result, pMessage, expectedResult) | pPassFail, bPassed
    bPassed := result == expectedResult
    if result <> expectedResult
        failCountSub++
    else
        passCountSub++
    pPassFail := !bPassed ? @"FAIL" : @"pass"
    if !bPassed
        if result <> expectedResult
            debug("  Value: ", uhex_long_(result), " (expected ", uhex_long_(expectedResult), ")")
        else
            debug("  Value: ", uhex_long_(result))
        debug("   -> ", zstr_(pPassFail))

PUB showFileDetails(pFilename) | bytes_used, bytes_free, block_count
    bytes_used, bytes_free, block_count := Flash.test_count_file_bytes(pFilename)
    debug("  File: [", zstr_(pFilename), "], ", udec(bytes_used, bytes_free, block_count))

PUB evaluateFSStats(pMessage, expectedFileCount, expectedBlocksUsed) | blocksUsed, blocksFree, fileCount, bPassed, pPassFail
    debug("* ", zstr_(pMessage))
    blocksUsed, blocksFree, fileCount := Flash.stats()
    bPassed := expectedFileCount == fileCount and expectedBlocksUsed == blocksUsed
    if fileCount <> expectedFileCount
        debug("  # files: ", udec_(fileCount), " (expected ", udec_(expectedFileCount), ")")
    else
        debug("  # files: ", udec_(fileCount))
    if blocksUsed <> expectedBlocksUsed
        debug("  # blocks used: ", udec_(blocksUsed), " (expected ", udec_(expectedBlocksUsed), ")")
    else
        debug("  # blocks used: ", udec_(blocksUsed))
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))

PUB evaluateFileStats(pfilename, expectedBlockCount, expectedBytesUsed) | bytesUsed, bytesFree, blockCount, bPassed, pPassFail
    debug("  File: [", zstr_(pFilename), "]")
    bytesUsed, bytesFree, blockCount := Flash.test_count_file_bytes(pFilename)
    bPassed := expectedBlockCount == blockCount and expectedBytesUsed == bytesUsed
    if blockCount <> expectedBlockCount
        debug("  # blocks: ", udec_(blockCount), " (expected ", udec_(expectedBlockCount), ")")
    else
        debug("  # blocks: ", udec_(blockCount))
    if bytesUsed <> expectedBytesUsed
        debug("  # bytes used: ", udec_(bytesUsed), " (expected ", udec_(expectedBytesUsed), ")")
    else
        debug("  # bytes used: ", udec_(bytesUsed))
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))

PUB showError(pCaller, errorCode)
    debug("EEEE ", zstr_(pCaller), " error: ", zstr_(Flash.string_for_error(errorCode)))

PUB ShowStats() | blocksUsed, blocksFree, fileCount

    blocksUsed, blocksFree, fileCount := Flash.stats()
    debug(udec(blocksUsed, blocksFree, fileCount))


PUB ShowFiles() | ID, Bytes, handle, Ptr, x, byte Filename[60], byte Buff[30]
    debug(" ")  ' blank line
    debug("  All Files:")
    repeat
        Flash.Directory(@ID, @Filename, @Bytes)                     'get next file
        if Filename[0]                                              'is there a filename?
            ReadFile(@Filename, @Buff, 30)                            'read file
            if isZstr(@Buff, 30)
                debug(zstr_(@Filename), udec(Bytes, ID), zstr(@Buff))      'show filename, bytes, ID, and file contents
            else
                debug(zstr_(@Filename), udec(Bytes, ID), ", @Buff={binary data}")      'show filename, bytes, ID, and file contents
        else
            quit                                                      'no more files, quit

PUB isBinaryFile(pFilename) : bIsBinaryStatus | pFileType
    pFileType := fileTypePtr(pFilename)
    bIsBinaryStatus :=  strcomp(pFileType, @"bin")

PUB isStringsFile(pFilename) : bIsBinaryStatus | pFileType
    pFileType := fileTypePtr(pFilename)
    bIsBinaryStatus :=  strcomp(pFileType, @"zstr")

PUB fileTypePtr(pFilename) : pFileType | byteIdx
    repeat byteIdx from 0 to strsize(pFilename) - 1
        if pFilename[byteIdx] == "."
            return @pFilename[byteIdx + 1]

PUB isZstr(pBffr, count) : bIsStringStatus | bytIdx
    bIsStringStatus := false
    repeat bytIdx from 0 to count - 1
            if pBffr[bytIdx] == 0
                return true
            if pBffr[bytIdx] < 32 or pBffr[bytIdx] > 126
                return

PUB ReadFile(pFilename, pStr, maxlen) | handle, byteCount
    if isStringsFile(pFilename)
        handle := Flash.open(pFilename,"R")                          'open file for reading
        if handle >= 0
                byteCount := Flash.rd_str(handle, pStr, maxlen)             'read bytes of zstring
                if byteCount < 0
                    showError(@"rd_str()", byteCount)
            'debug("- read str(", udec_(byteCount), ")=[", zstr_(pStr), "]")      'show filename, bytes, ID, and file contents

            Flash.Close(handle)                                         'close file
    else
        bytefill(pStr, $ff, maxlen)
' -------
' dbgMemDump(@"TASK Stack", pStack, (nStackLongCt + 1) * 4)

PUB dbgMemDump(pMessage, pBytes, lenBytes) | rowCount, rowLen, pCurrByte, lastRowByteCount, bytesSoFar
'' Dump rows of hex values with address preceeding

    if pMessage
        debug("** ", zstr_(pMessage), ":")

    rowCount := lenBytes / 16
    lastRowByteCount := lenBytes - (rowCount * 16)
    pCurrByte := pBytes
    bytesSoFar := 0

    ' emit full lines
    if rowCount > 0
        repeat rowCount
            dbgMemDumpRow(pCurrByte, 16)
            pCurrByte += 16
            bytesSoFar += 16

    if  bytesSoFar < lenBytes
        ' emit last line
        dbgMemDumpRow(pCurrByte, lastRowByteCount)

PRI dbgMemDumpRow(pBytes, lenBytes)
' emit address followed by bytes
    debug(" ", uhex_long_(pBytes), ": ", uhex_byte_array_(pBytes, lenBytes))


con { license }

{{
  =================================================================================================

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  =================================================================================================
}}
