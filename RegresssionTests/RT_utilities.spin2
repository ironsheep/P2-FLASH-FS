'' =================================================================================================
''
''   File....... RT_utilites.spin2
''   Purpose.... This object provides commonly used regression test parts to each test object
''   Author..... Stephen M Moraco
''               -- see below for terms of use
''   E-mail.....stephen@ironsheep.biz
''   Started.... AUG 2023
''   Updated.... 14 SEP 2023
''
'' =================================================================================================

CON


OBJ
    flash : "flash_fs"


DAT

   testSignature  long    $12345678

VAR { test stats vars }

    LONG    numberTests
    LONG    passCount
    LONG    failCount
    LONG    passCountSub
    LONG    failCountSub

    LONG    varSignature

pub null()

'' This is not an application
''  (invoke format() or mount() to use the flash file system)

pri initIfNotAlready()
    if varSignature <> testSignature
        numberTests := 0
        passCount := 0
        failCount := 0
        passCountSub := 0
        failCountSub := 0
        varSignature := testSignature

pub startTestGroup(pDesciption)
    ' show test-group heading

    initIfNotAlready()
    debug(" ")  ' blank line
    debug(" ")  ' blank line
    debug(" ------------------------------------------------------------")  ' blank line
    debug("* Test Group: ", zstr_(pDesciption))

pub startTest(pDesciption) | ecGot, ecExpected
    ' if prior sub tests show sub tests results

    initIfNotAlready()
    if failCountSub <> 0 or passCountSub <> 0
        debug("  Sub-Test Results: Pass: ", udec_(passCountSub), ", Fail: ", udec_(failCountSub))
        if failCountSub <> 0
            failCount++
        else
            passCount++
        passCountSub := 0
        failCountSub := 0
    numberTests++
    '  now show new test info
    debug(" ")  ' blank line
    debug("* Test #", udec_(numberTests), ": ", zstr_(pDesciption))

pub ShowTestEndCounts()
    ' show summary of all tests
    debug(" ")  ' blank line
    debug("* ", udec_(numberTests), " Tests: , Pass: ", udec_(passCount), ", Fail: ", udec_(failCount))

pub evaluate(result, expectedResult) | ecGot, ecExpected
    if result > 0
        if result <> expectedResult
            if expectedResult < 0
                ecExpected := flash.string_for_error(expectedResult)
                debug("  Result: ", sdec_(result), " (expected ", zstr_(ecExpected), ")")
            else
                debug("  Result: ", udec_(result), " (expected ", udec_(expectedResult), ")")
            failCount++
        else
            debug("  Result: ", udec_(result))
            passCount++
    else
        ecGot := flash.string_for_error(result)
        ecExpected := flash.string_for_error(expectedResult)
        if result <> expectedResult
            debug("   ECode: ", zstr_(ecGot), " (expected ", zstr_(ecExpected), ")")
            failCount++
        else
            debug("   ECode: ", zstr_(ecGot))
            passCount++
    pPassFail := result <> expectedResult ? @"FAIL" : @"pass"
    debug("   -> ", zstr_(pPassFail))

pub evaluateSubStatus(result, pMessage, expectedResult) | ecGot, ecExpected
    ecGot := flash.string_for_error(result)
    ecExpected := flash.string_for_error(expectedResult)
    bPassed := result == expectedResult
    if result <> expectedResult
        failCountSub++
    else
        passCountSub++
    pPassFail := !bPassed ? @"FAIL" : @"pass"
    if !bPassed
        if result <> expectedResult
            debug("  Status: ", zstr_(result), "(", sdec_(result), "),  (expected ", zstr_(expectedResult), "(", sdec_(expectedResult), "))")
        else
            debug("  Status: ", zstr_(result), "(", sdec_(result), ")")
        debug("   -> ", zstr_(pPassFail))

pub evaluateSubValue(result, pMessage, expectedResult)
    bPassed := result == expectedResult
    if result <> expectedResult
        failCountSub++
    else
        passCountSub++
    pPassFail := !bPassed ? @"FAIL" : @"pass"
    if !bPassed
        if result <> expectedResult
            debug("  Value: ", uhex_long_(result), " (expected ", uhex_long_(expectedResult), ")")
        else
            debug("  Value: ", uhex_long_(result))
        debug("   -> ", zstr_(pPassFail))


pub evaluateSingleValue(result, pMessage, expectedResult)
    bPassed := result == expectedResult
    pPassFail := !bPassed ? @"FAIL" : @"pass"
    if result <> expectedResult
        debug("  ", zstr_(pMessage), ": ", sdec_long_(result), " (expected ", sdec_long_(expectedResult), ")")
        failCount++
    else
        debug("  ", zstr_(pMessage), ": ", sdec_long_(result))
        passCount++
    debug("   -> ", zstr_(pPassFail))


pub showFileDetails(pFilename) | bytesUsed, bytes_free, block_count
    debug(" ")  ' blank line
    'debug("* showFileDetails()...ENTRY")
    bytesUsed, bytes_free, block_count := flash.test_count_file_bytes(pFilename)
    if bytesUsed < 0
        debug("  File: [", zstr_(pFilename), "]")
        debug("  # Error: ", zstr_(flash.string_for_error(bytesUsed)))
    else
        debug("  File: [", zstr_(pFilename), "], ", udec(bytesUsed, bytes_free, block_count))
    'debug("* showFileDetails()...EXIT")

pub showPendingCommitChain(handle) | pFilename, pSignatureAr, signatureCount
    pFilename := flash.TEST_filename_for_handle(handle)
    debug(" ")  ' blank line
    debug("  File: [", zstr_(pFilename), "] pending commit")
    pSignatureAr, signatureCount := flash.TEST_getCommitBlockSignatures(handle)
    if signatureCount > 0
        debug("  # ", udec_(signatureCount), " Blocks in chain:")
        showSignatureChain(pSignatureAr, signatureCount, handle)
    else
        debug("  # ", udec_(signatureCount), " Blocks in commit")

pub showFileSignatures(pFilename) | pSignatureAr, signatureCount
    pSignatureAr, signatureCount := flash.TEST_getFileBlockSignatures(pFilename)
    if signatureCount > 0
        debug("  # ", udec_(signatureCount), " Blocks in file:")
        showSignatureChain(pSignatureAr, signatureCount, -1)

pub showSignatureChain(pSignatureAr, signatureCount, possHandle) | signature, signatureIdx, pBlockType, pLifeCycle, nextIdOrEndPtr, blockID, blockAddr
    if signatureCount > 0
        repeat signatureIdx from 0 to signatureCount -1
            signature := LONG[pSignatureAr][signatureIdx]
            nextIdOrEndPtr := signature.[31..20]
            blockID := signature.[19..8]
            blockAddr := flash.TEST_getBlockAddressForId(blockID, possHandle)
            case signature.[7..5]
                %000:
                  pLifeCycle := @"canceled-0"
                %001:
                  pLifeCycle := @"canceled-1"
                %010:
                  pLifeCycle := @"canceled-2"
                %011:
                  pLifeCycle := @"ACTIVE-3"
                %100:
                  pLifeCycle := @"canceled-4"
                %101:
                  pLifeCycle := @"ACTIVE-5"
                %110:
                  pLifeCycle := @"ACTIVE-6"
                %111:
                  pLifeCycle := @"erased"
            case signature.[1..0]
                %00: pBlockType := @"HEAD/last"
                %01: pBlockType := @"HEAD/more"
                %10: pBlockType := @"BODY/last"
                %11: pBlockType := @"BODY/more"
            if signature.[0]
                ' show more block
                debug("    ", udec_(signatureIdx+1), ": [", uhex_word_(blockAddr), "] ", zstr_(pBlockType), ", thisID=",udec_(blockID), ", nextId=", udec_(nextIdOrEndPtr), ", lifeCycle [", zstr_(pLifeCycle), "], sig=[", uhex_long_(signature), "]")
            else
                ' show last block
                debug("    ", udec_(signatureIdx+1), ": [", uhex_word_(blockAddr), "] ", zstr_(pBlockType), ", thisID=",udec_(blockID), ", endPtr=", uhex_word_(nextIdOrEndPtr), ", lifeCycle [", zstr_(pLifeCycle), "], sig=[", uhex_long_(signature), "]")

pub evaluateFSStats(pMessage, expectedFileCount, expectedBlocksUsed) | blocksUsed, blocksFree, fileCount
    debug("* ", zstr_(pMessage))
    blocksUsed, blocksFree, fileCount := flash.stats()
    debug("  # FileSystem: ", udec_(blocksUsed, blocksFree, fileCount))
    bPassed := expectedFileCount == fileCount and expectedBlocksUsed == blocksUsed
    if fileCount <> expectedFileCount
        debug("  # files: ", udec_(fileCount), " (expected ", udec_(expectedFileCount), ")")
    else
        debug("  # files: ", udec_(fileCount))
    if blocksUsed <> expectedBlocksUsed
        debug("  # blocks used: ", udec_(blocksUsed), " (expected ", udec_(expectedBlocksUsed), ")")
    else
        debug("  # blocks used: ", udec_(blocksUsed))
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))

pub evaluateFileStats(pfilename, expectedBlockCount, expectedBytesUsed) | bytesUsed, bytesFree, blockCount
    debug("  File: [", zstr_(pFilename), "]")
    showFileSignatures(pFilename)
    bytesUsed, bytesFree, blockCount := flash.test_count_file_bytes(pFilename)
    if bytesUsed < 0
        debug("  # Error: ", zstr_(flash.string_for_error(bytesUsed)))
        bPassed := false
    else
        bPassed := expectedBlockCount == blockCount and expectedBytesUsed == bytesUsed
        if blockCount <> expectedBlockCount
            debug("  # blocks: ", udec_(blockCount), " (expected ", udec_(expectedBlockCount), ")")
        else
            debug("  # blocks: ", udec_(blockCount))
        if bytesUsed <> expectedBytesUsed
            debug("  # bytes used: ", udec_(bytesUsed), " (expected ", udec_(expectedBytesUsed), ")")
        else
            debug("  # bytes used: ", udec_(bytesUsed))
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))

pub evaluateFileStatsRange(pfilename, expectedBlockCount, exptecedMinBytesUsed, expectedBytesUsed) | bytesUsed, bytesFree, blockCount, maxBytesUsed
    debug("  File: [", zstr_(pFilename), "]")
    showFileSignatures(pFilename)
    bytesUsed, bytesFree, blockCount := flash.test_count_file_bytes(pFilename)
    maxBytesUsed := flash.BYTES_IN_HEAD_BLOCK
    maxBytesUsed += (flash.BYTES_IN_BODY_BLOCK * (expectedBlockCount - 1))
    if bytesUsed < 0
        debug("  # Error: ", zstr_(flash.string_for_error(bytesUsed)))
        bPassed := false
    else
        bPassed := expectedBlockCount == blockCount and bytesUsed >= exptecedMinBytesUsed and bytesUsed <= maxBytesUsed
        if blockCount <> expectedBlockCount
            debug("  # blocks: ", udec_(blockCount), " (expected ", udec_(expectedBlockCount), ")")
        else
            debug("  # blocks: ", udec_(blockCount))
        if bytesUsed < exptecedMinBytesUsed or bytesUsed > maxBytesUsed
            debug("  # bytes used: ", udec_(bytesUsed), " (expected ", udec_(expectedBytesUsed), " [", udec_(exptecedMinBytesUsed), "-", udec_(maxBytesUsed), "])")
        else
            debug("  # bytes used: ", udec_(bytesUsed), ", ", udec(expectedBytesUsed))
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))

pub showError(pCaller, errorCode)
    debug("EEEE ", zstr_(pCaller), " error: ", zstr_(flash.string_for_error(errorCode)))

pub ShowStats() | blocksUsed, blocksFree, fileCount

    blocksUsed, blocksFree, fileCount := flash.stats()
    debug(udec(blocksUsed, blocksFree, fileCount))


pub showFiles() | ID, Bytes, byte Filename[128], byte Buff[30]
    debug(" ")  ' blank line
    debug("  All Files:")
    ID := 0                                                         'strictly speaking only needed for flexspin, but it helps to remind us that ID must be initialized to 0
    repeat
        flash.directory(@ID, @Filename, @Bytes)                     'get next file
        if Filename[0]                                              'is there a filename?
            ReadFile(@Filename, @Buff, 30)                            'read file
            if isZstr(@Buff, 30)
                debug(zstr_(@Filename), udec(Bytes, ID), zstr(@Buff))      'show filename, bytes, ID, and file contents
            else
                debug(zstr_(@Filename), udec(Bytes, ID), ", @Buff={binary data}")      'show filename, bytes, ID, and file contents
        else
            quit                                                      'no more files, quit

pub isBinaryFile(pFilename) : bIsBinaryStatus | pFileType
    pFileType := fileTypePtr(pFilename)
    bIsBinaryStatus :=  strcomp(pFileType, @"bin")

pub isStringsFile(pFilename) : bIsBinaryStatus | pFileType
    pFileType := fileTypePtr(pFilename)
    bIsBinaryStatus :=  strcomp(pFileType, @"zstr")

pub fileTypePtr(pFilename) : pFileType | byteIdx
    repeat byteIdx from 0 to strsize(pFilename) - 1
        if pFilename[byteIdx] == "."
            return @pFilename[byteIdx + 1]

pub isZstr(pBffr, count) : bIsStringStatus | bytIdx
    bIsStringStatus := false
    repeat bytIdx from 0 to count - 1
            if pBffr[bytIdx] == 0
                return true
            if pBffr[bytIdx] < 32 or pBffr[bytIdx] > 126
                return

pub ReadFile(pFilename, pStr, maxlen) | handle, byteCount
    if isStringsFile(pFilename)
        handle := flash.open(pFilename,"R")                          'open file for reading
        if handle >= 0
                byteCount := flash.rd_str(handle, pStr, maxlen)             'read bytes of zstring
                if byteCount < 0
                    showError(@"rd_str()", byteCount)
            'debug("- read str(", udec_(byteCount), ")=[", zstr_(pStr), "]")      'show filename, bytes, ID, and file contents

            flash.close(handle)                                         'close file
    else
        bytefill(pStr, $ff, maxlen)

pub ensureEmptyDirectory() | ID, Bytes, byte Filename[128], byte Buff[30]
'' validate that directory is empty!
    flash.directory(@ID, @Filename, @Bytes)                     'get first file
    bPassed := true
    if Filename[0]                                              'is there a filename?
        bPassed := false

    if !bPassed
        debug("  # Error Found file: [", zstr_(@Filename), "] (expected: no files)")
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))

pub blockCountForFileSize(fileSizeInBytes) : blockCount | remainingSize, overflowBodyCount
    ' return number of blocks for given file size
    blockCount := 1 ' head block
    if fileSizeInBytes > flash.BYTES_IN_HEAD_BLOCK
        remainingSize := fileSizeInBytes - flash.BYTES_IN_HEAD_BLOCK
        blockCount += remainingSize / flash.BYTES_IN_BODY_BLOCK                 ' body blocks
        overflowBodyCount := remainingSize +// flash.BYTES_IN_BODY_BLOCK ' final bytes in tail block
        'debug("blockCountForFileSize()  # remainByt: ", udec_(remainingSize), ", ovflwByt: ", udec_(overflowBodyCount))
        if overflowBodyCount > 0
            blockCount++
    'debug("blockCountForFileSize()  # bytes: ", udec_(fileSizeInBytes), ", blocks: ", udec_(blockCount))

pub bytesAllocatedFor(sizeInBytes) : maxAllocationBytes | bodyBlocks
    ' return max allocation size for circular file
    maxAllocationBytes := flash.BYTES_IN_HEAD_BLOCK
    if sizeInBytes > flash.BYTES_IN_HEAD_BLOCK
        bodyBlocks := ((sizeInBytes - flash.BYTES_IN_HEAD_BLOCK) + (flash.BYTES_IN_BODY_BLOCK - 1)) / flash.BYTES_IN_BODY_BLOCK
        maxAllocationBytes += bodyBlocks * flash.BYTES_IN_BODY_BLOCK

pub blocksAllocatedFor(sizeInBytes) : maxAllocationBlocks | bodyBlocks
    ' return max allocation size for circular file
    maxAllocationBlocks := 1
    if sizeInBytes > flash.BYTES_IN_HEAD_BLOCK
        bodyBlocks := ((sizeInBytes - flash.BYTES_IN_HEAD_BLOCK) + (flash.BYTES_IN_BODY_BLOCK - 1)) / flash.BYTES_IN_BODY_BLOCK
        maxAllocationBlocks += bodyBlocks

dat
    pCurrRefDir     long    0
    refFileCount    long    0
    foundFileCount  long    0
    refByteCount    long    0
    calcBlocks      long    0
    refBlocks       long    0
    pRefFilename    long    0
    bStop           long    0
    bPassed         long    0
    bBadEntry       long    0
    pPassFail       long    0

pub checkMatchingEntries(pDirEntries) | ID, Bytes, byte Filename[128], byte Buff[30]
{
        ' structure for directory checking
        ' (pDirEntries := @dirEntr1)
dirEntr1        LONG    @testfile1     ' pointer to filename
fileBytes1      LONG    10             ' length in bytes
fileBlocks1     LONG    1              ' number of blocks allocated
dirEntr2        LONG    @testfile2     ' pointer to filename
fileBytes2      LONG    20             ' length in bytes
fileBlocks2     LONG    1              ' number of blocks allocated
dirEnd          LONG    0              ' ptr = NULL, no more entries
}
    bPassed := true
    pCurrRefDir := pDirEntries
    refFileCount := 0
    foundFileCount := 0
    ID := 0                                             ' start seach at beginning
    repeat
        pRefFilename := LONG[pCurrRefDir][0]            ' get pointer to reference filename -OR- NULL
        refByteCount := LONG[pCurrRefDir][1]            ' get byte count
        refblocks    := LONG[pCurrRefDir][2]            ' get block count
        flash.directory(@ID, @Filename, @Bytes)         'get next file
        if pRefFilename == 0                            ' if not beyond last REF entry
            'debug(" - end of table entries!")
        else
            refFileCount++
        if Filename[0] == 0                             'is there a filename?
            'debug(" - end of directory entries!")
        else
            foundFileCount++
        if pRefFilename == 0 && Filename[0] == 0
            quit

        if pRefFilename <> 0 && Filename[0] <> 0
            calcBlocks := blockCountForFileSize(Bytes)
            'debug(" read ->: [", zstr_(@Filename), "], bytes=(", udec_(Bytes), "), blocks(", udec_(calcBlocks), ")")
            'debug(" load ->: [", zstr_(pRefFilename), "], bytes=(", udec_(refByteCount), "), blocks(", udec_(refBlocks), ")")
            bBadEntry := false
            ' ensure all three values match
            if strcomp(@Filename, pRefFilename) == false
                debug(" - BAD filenames!")
                bBadEntry := true
            if Bytes <> refByteCount
                debug(" - BAD byte count!")
                bBadEntry := true
            if calcBlocks <> refBlocks
                debug(" - BAD block count!")
                bBadEntry := true
            ' checked, now summarize findings iff bad
            if bBadEntry
                debug("  #    Found: [", zstr_(@Filename), "], bytes=(", udec_(Bytes), "), blocks(", udec_(calcBlocks), ")")
                debug("  # Expected: [", zstr_(pRefFilename), "], bytes=(", udec_(refByteCount), "), blocks(", udec_(refBlocks), ")")
                bPassed := false
        if pRefFilename <> 0                            ' if not beyond last REF entry
            pCurrRefDir := @LONG[pCurrRefDir][3]

    if foundFileCount <> refFileCount
        debug("  # Found ", udec_(foundFileCount), " files (expected ", udec_(refFileCount), ")")
        bPassed := false
    pPassFail := bPassed == false ? @"FAIL" : @"pass"
    if bPassed == false
        failCount++
    else
        passCount++
    debug("   -> ", zstr_(pPassFail))


' -------
' dbgMemDump(@"TASK Stack", pStack, (nStackLongCt + 1) * 4)

pub dbgMemDumpAbs(pMessage, pBytes, lenBytes) | rowCount, rowLen, pCurrByte, lastRowByteCount, bytesSoFar
'' Dump rows of hex values with address preceeding
    if pMessage
        debug("** ", zstr_(pMessage), ":")

    rowCount := lenBytes / 16
    lastRowByteCount := lenBytes - (rowCount * 16)
    pCurrByte := pBytes
    bytesSoFar := 0

    ' emit full lines
    if rowCount > 0
        repeat rowCount
            dbgMemDumpRowAbs(pCurrByte, 16)
            pCurrByte += 16
            bytesSoFar += 16

    if  bytesSoFar < lenBytes
        ' emit last line
        dbgMemDumpRowAbs(pCurrByte, lastRowByteCount)

pri dbgMemDumpRowAbs(pBytes, lenBytes)
' emit address followed by bytes
    debug(" ", uhex_long_(pBytes), ": ", uhex_byte_array_(pBytes, lenBytes))


pub dbgMemDump(pMessage, pBytes, lenBytes) | rowCount, rowLen, pCurrByte, lastRowByteCount, bytesSoFar, offset

    if pMessage
        debug("** ", zstr_(pMessage), ":")

    offset := 0
    rowCount := lenBytes / 16
    lastRowByteCount := lenBytes - (rowCount * 16)
    pCurrByte := pBytes
    bytesSoFar := 0

    ' emit full lines
    if rowCount > 0
        repeat rowCount
            dbgMemDumpRow(pCurrByte, 16, offset)
            offset += 16
            pCurrByte += 16
            bytesSoFar += 16

    if  bytesSoFar < lenBytes
        ' emit last line
        dbgMemDumpRow(pCurrByte, lastRowByteCount, offset)

pri dbgMemDumpRow(pBytes, lenBytes, offset)
' emit address followed by bytes
    debug(" ", uhex_long_(offset), ": ", uhex_byte_array_(pBytes, lenBytes))

pub record_crc(p_record_buffer, record_length) : crc
' Calculate and return the CRC for this pointed to block
'
' @param p_block_buffer - the address of the 4KB buffer for the file associated with this handle
' @returns crc - the calculated CRC for the block

  return getcrc(p_record_buffer, $AD0424F3 rev 31, record_length - 4)  'compute CRC of a buffered block

pub dumpFileHeads() | ID, Bytes, byte Filename[128], byte Buff[30], pBlock
    debug(" ")  ' blank line
    debug("  All Files:")
    repeat
        flash.directory(@ID, @Filename, @Bytes)                     'get next file
        if Filename[0]                                              'is there a filename?
            pBlock := flash.TEST_getHead4kBlock(@Filename)
            dbgMemDump(@Filename, pBlock, 64)
            debug(" ")  ' blank line
        else
            quit                                                      'no more files, quit


con { license }

{{
  =================================================================================================

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  =================================================================================================
}}
