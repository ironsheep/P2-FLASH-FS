Cog0  INIT $0000_0000 $0000_0000 load
Cog0  INIT $0000_0EC0 $0000_CD14 jump
Cog0  blocksUsed = 0, blocksFree = 3_968, fileCount = 0
Cog0
Cog0    All Files:
Cog0
Cog0  * Environment: Chip S/N and Driver Version
Cog0     CHIP Serial Number: $E461_2D03-$D35B_1A2A
Cog0     Driver:
Cog0  * init VAR
Cog0
Cog0  * Test #1: Ensure we have no files at start
Cog0     -> pass
Cog0
Cog0  * Test #2: BAD: Read when file doesn't exist
Cog0     ECode: E_FILE_NOT_FOUND: File not present
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only - partially filled with 5 BYTEs
Cog0
Cog0  * Test #3: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #4: Write N BYTEs
Cog0    Sub-Test Results: count=5, Pass: 5, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #5: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw10bytes.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=0, dataOfs=$0000, endPtr=$008D, lifeCycle [erased], sig=[$08D0_00F4]  MODIFIED
Cog0
Cog0  * Test #6: Close written file
Cog0  * wr_block() block_address = $019C, block_id = 0, NextID_EndPtr = $008D
Cog0  - program_block() block_address = $019C
Cog0  - activate_block() block_address = $019C
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw10bytes.bin], bytesUsed = 5, bytes_free = 3_951, block_count = 1
Cog0
Cog0  * Test #7: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 1, 3_967, 1
Cog0    # files: 1
Cog0    # blocks used: 1
Cog0     -> pass
Cog0
Cog0  * Test #8: Ensure expected file stats
Cog0    File: [rw10bytes.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$019C] HEAD/last, thisID=0, dataOfs=$0000, endPtr=$008D, lifeCycle [ACTIVE-3], sig=[$08D0_007C]
Cog0    # blocks: 1
Cog0    # bytes used: 5
Cog0     -> pass
Cog0
Cog0  * Test #9: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #10: read expected N BYTEs
Cog0    Sub-Test Results: count=5, Pass: 5, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #11: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #12: BAD: read one more BYTE than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #13: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 5, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only (replace file) - partially filled with 10 BYTEs
Cog0
Cog0  * Test #14: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #15: Write N BYTEs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #16: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw10bytes.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=0, dataOfs=$0000, endPtr=$0092, lifeCycle [erased], sig=[$0920_00F4]  MODIFIED
Cog0
Cog0  * Test #17: Close written file
Cog0  * wr_block() block_address = $0DA8, block_id = 0, NextID_EndPtr = $0092
Cog0  - program_block() block_address = $0DA8
Cog0  - activate_block() block_address = $0DA8
Cog0  * delChnFmID() [$019C] block_id = 0, EndID = 0, delete_mode = 0, KeepFirstIDValid = -1
Cog0  - cancel_block() block_address = $019C
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw10bytes.bin], bytesUsed = 10, bytes_free = 3_946, block_count = 1
Cog0
Cog0  * Test #18: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 1, 3_967, 1
Cog0    # files: 1
Cog0    # blocks used: 1
Cog0     -> pass
Cog0
Cog0  * Test #19: Ensure expected file stats
Cog0    File: [rw10bytes.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$0DA8] HEAD/last, thisID=0, dataOfs=$0000, endPtr=$0092, lifeCycle [ACTIVE-5], sig=[$0920_00BC]
Cog0    # blocks: 1
Cog0    # bytes used: 10
Cog0     -> pass
Cog0
Cog0  * Test #20: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #21: read expected N BYTEs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #22: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #23: BAD: read one more BYTE than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #24: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 10, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only - partially filled with 9 WORDs
Cog0
Cog0  * Test #25: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #26: Write N WORDs
Cog0    Sub-Test Results: count=9, Pass: 9, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #27: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw9words.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=1, dataOfs=$0000, endPtr=$009A, lifeCycle [erased], sig=[$09A0_01F4]  MODIFIED
Cog0
Cog0  * Test #28: Close written file
Cog0  * wr_block() block_address = $051D, block_id = 1, NextID_EndPtr = $009A
Cog0  - program_block() block_address = $051D
Cog0  - activate_block() block_address = $051D
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw9words.bin], bytesUsed = 18, bytes_free = 3_938, block_count = 1
Cog0
Cog0  * Test #29: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 2, 3_966, 2
Cog0    # files: 2
Cog0    # blocks used: 2
Cog0     -> pass
Cog0
Cog0  * Test #30: Ensure expected file stats
Cog0    File: [rw9words.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$051D] HEAD/last, thisID=1, dataOfs=$0000, endPtr=$009A, lifeCycle [ACTIVE-3], sig=[$09A0_017C]
Cog0    # blocks: 1
Cog0    # bytes used: 18
Cog0     -> pass
Cog0
Cog0  * Test #31: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #32: read expected N WORDs
Cog0    Sub-Test Results: count=9, Pass: 9, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #33: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #34: BAD: read one more WORD than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #35: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 10, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0  rw9words.bin, byteCount = 18, blockID = 2, BlocksUsed = 1, @Buff={binary data}
Cog0
Cog0  * Test #36: Ensure we have 2 files written so far
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only - partially filled with 12 LONGs
Cog0
Cog0  * Test #37: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #38: Write N LONGs
Cog0    Sub-Test Results: count=12, Pass: 12, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #39: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw12longs.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=2, dataOfs=$0000, endPtr=$00B8, lifeCycle [erased], sig=[$0B80_02F4]  MODIFIED
Cog0
Cog0  * Test #40: Close written file
Cog0  * wr_block() block_address = $06B8, block_id = 2, NextID_EndPtr = $00B8
Cog0  - program_block() block_address = $06B8
Cog0  - activate_block() block_address = $06B8
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw12longs.bin], bytesUsed = 48, bytes_free = 3_908, block_count = 1
Cog0
Cog0  * Test #41: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 3, 3_965, 3
Cog0    # files: 3
Cog0    # blocks used: 3
Cog0     -> pass
Cog0
Cog0  * Test #42: Ensure expected file stats
Cog0    File: [rw12longs.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$06B8] HEAD/last, thisID=2, dataOfs=$0000, endPtr=$00B8, lifeCycle [ACTIVE-3], sig=[$0B80_027C]
Cog0    # blocks: 1
Cog0    # bytes used: 48
Cog0     -> pass
Cog0
Cog0  * Test #43: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #44: read expected LONGs
Cog0    Sub-Test Results: count=12, Pass: 12, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #45: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #46: BAD: read one more LONG than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #47: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 10, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0  rw9words.bin, byteCount = 18, blockID = 2, BlocksUsed = 1, @Buff={binary data}
Cog0  rw12longs.bin, byteCount = 48, blockID = 3, BlocksUsed = 1, @Buff={binary data}
Cog0
Cog0  * Test #48: Ensure we have 3 files written so far
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only - partially filled with 10 STRINGs
Cog0
Cog0  * Test #49: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #50: Write 10 STRINGs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #51: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw10strings.zstr] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=3, dataOfs=$0000, endPtr=$0118, lifeCycle [erased], sig=[$1180_03F4]  MODIFIED
Cog0
Cog0  * Test #52: Close written file
Cog0  * wr_block() block_address = $06F3, block_id = 3, NextID_EndPtr = $0118
Cog0  - program_block() block_address = $06F3
Cog0  - activate_block() block_address = $06F3
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [rw10strings.zstr], bytesUsed = 144, bytes_free = 3_812, block_count = 1
Cog0
Cog0  * Test #53: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 4, 3_964, 4
Cog0    # files: 4
Cog0    # blocks used: 4
Cog0     -> pass
Cog0
Cog0  * Test #54: Ensure expected file stats
Cog0    File: [rw10strings.zstr]
Cog0    # 1 Blocks in file:
Cog0      1: [$06F3] HEAD/last, thisID=3, dataOfs=$0000, endPtr=$0118, lifeCycle [ACTIVE-3], sig=[$1180_037C]
Cog0    # blocks: 1
Cog0    # bytes used: 144
Cog0     -> pass
Cog0
Cog0  * Test #55: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #56: read expected 10 STRINGs
Cog0    Sub-Test Results: count=10, Pass: 10, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #57: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #58: BAD: read one more STRING than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #59: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 10, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0  rw9words.bin, byteCount = 18, blockID = 2, BlocksUsed = 1, @Buff={binary data}
Cog0  rw12longs.bin, byteCount = 48, blockID = 3, BlocksUsed = 1, @Buff={binary data}
Cog0  rw10strings.zstr, byteCount = 144, blockID = 4, BlocksUsed = 1, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block only - filled with LONGs
Cog0
Cog0  * Test #60: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0   -> pass
Cog0
Cog0  * Test #61: Write N LONGs
Cog0    Sub-Test Results: count=989, Pass: 989, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #62: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [fullHeadLongs.bin] pending commit
Cog0    # 1 Blocks in chain:
Cog0      1: [$0000] HEAD/last, thisID=4, dataOfs=$0000, endPtr=$0FFC, lifeCycle [erased], sig=[$FFC0_04F4]  MODIFIED
Cog0
Cog0  * Test #63: Close written file
Cog0  * wr_block() block_address = $0674, block_id = 4, NextID_EndPtr = $0FFC
Cog0  - program_block() block_address = $0674
Cog0  - activate_block() block_address = $0674
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [fullHeadLongs.bin], bytesUsed = 3_956, bytes_free = 0, block_count = 1
Cog0
Cog0  * Test #64: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 5, 3_963, 5
Cog0    # files: 5
Cog0    # blocks used: 5
Cog0     -> pass
Cog0
Cog0  * Test #65: Ensure expected file stats
Cog0    File: [fullHeadLongs.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$0674] HEAD/last, thisID=4, dataOfs=$0000, endPtr=$0FFC, lifeCycle [ACTIVE-3], sig=[$FFC0_047C]
Cog0    # blocks: 1
Cog0    # bytes used: 3_956
Cog0     -> pass
Cog0
Cog0  * Test #66: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #67: read expected LONGs
Cog0    Sub-Test Results: count=989, Pass: 989, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #68: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #69: BAD: read one more LONG than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #70: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block + body block - filled with LONGs full head + 2
Cog0
Cog0  * Test #71: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #72: Write N LONGs
Cog0  * wr_block() block_address = $05DA, block_id = 5, NextID_EndPtr = $0006
Cog0  - program_block() block_address = $05DA
Cog0    Sub-Test Results: count=991, Pass: 991, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #73: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [moreThanHeadLongs.bin] pending commit
Cog0    # 2 Blocks in chain:
Cog0      1: [$05DA] HEAD/more, thisID=5, dataOfs=0, nextId=6, lifeCycle [erased], sig=[$0060_05FD]
Cog0      2: [$0000] BODY/last, thisID=6, endPtr=$000C, lifeCycle [erased], sig=[$00C0_06F6]  MODIFIED
Cog0
Cog0  * Test #74: Close written file
Cog0  * wr_block() block_address = $0843, block_id = 6, NextID_EndPtr = $000C
Cog0  - program_block() block_address = $0843
Cog0  - activate_block() block_address = $0843
Cog0  - activate_block() block_address = $05DA
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [moreThanHeadLongs.bin], bytesUsed = 3_964, bytes_free = 4_080, block_count = 2
Cog0
Cog0  * Test #75: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 7, 3_961, 6
Cog0    # files: 6
Cog0    # blocks used: 7
Cog0     -> pass
Cog0
Cog0  * Test #76: Ensure expected file stats
Cog0    File: [moreThanHeadLongs.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$05DA] HEAD/more, thisID=5, dataOfs=0, nextId=6, lifeCycle [ACTIVE-3], sig=[$0060_057D]
Cog0      2: [$0843] BODY/last, thisID=6, endPtr=$000C, lifeCycle [ACTIVE-3], sig=[$00C0_067E]
Cog0    # blocks: 2
Cog0    # bytes used: 3_964
Cog0     -> pass
Cog0
Cog0  * Test #77: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #78: read expected LONGs
Cog0    Sub-Test Results: count=991, Pass: 991, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #79: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #80: BAD: read one more LONG than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #81: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Head block + body block * 2 - filled with LONGs full head, full body, + 2
Cog0
Cog0  * Test #82: Open File for write
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #83: Write N LONGs
Cog0  * wr_block() block_address = $0B7E, block_id = 7, NextID_EndPtr = $0008
Cog0  - program_block() block_address = $0B7E
Cog0  * wr_block() block_address = $0AF8, block_id = 8, NextID_EndPtr = $0009
Cog0  - program_block() block_address = $0AF8
Cog0  - activate_block() block_address = $0AF8
Cog0    Sub-Test Results: count=2_013, Pass: 2_013, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #84: ensure no errors on writes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [moreThanHeadBodyLongs.bin] pending commit
Cog0    # 3 Blocks in chain:
Cog0      1: [$0B7E] HEAD/more, thisID=7, dataOfs=0, nextId=8, lifeCycle [erased], sig=[$0080_07FD]
Cog0      2: [$0AF8] BODY/more, thisID=8, nextId=9, lifeCycle [ACTIVE-3], sig=[$0090_087F]
Cog0      3: [$0000] BODY/last, thisID=9, endPtr=$000C, lifeCycle [erased], sig=[$00C0_09F6]  MODIFIED
Cog0
Cog0  * Test #85: Close written file
Cog0  * wr_block() block_address = $0D75, block_id = 9, NextID_EndPtr = $000C
Cog0  - program_block() block_address = $0D75
Cog0  - activate_block() block_address = $0D75
Cog0  - activate_block() block_address = $0B7E
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    File: [moreThanHeadBodyLongs.bin], bytesUsed = 8_052, bytes_free = 4_080, block_count = 3
Cog0
Cog0  * Test #86: Ensure expected file system changes
Cog0  * post file write
Cog0    # FileSystem: 10, 3_958, 7
Cog0    # files: 7
Cog0    # blocks used: 10
Cog0     -> pass
Cog0
Cog0  * Test #87: Ensure expected file stats
Cog0    File: [moreThanHeadBodyLongs.bin]
Cog0    # 3 Blocks in file:
Cog0      1: [$0B7E] HEAD/more, thisID=7, dataOfs=0, nextId=8, lifeCycle [ACTIVE-3], sig=[$0080_077D]
Cog0      2: [$0AF8] BODY/more, thisID=8, nextId=9, lifeCycle [ACTIVE-3], sig=[$0090_087F]
Cog0      3: [$0D75] BODY/last, thisID=9, endPtr=$000C, lifeCycle [ACTIVE-3], sig=[$00C0_097E]
Cog0    # blocks: 3
Cog0    # bytes used: 8_052
Cog0     -> pass
Cog0
Cog0  * Test #88: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #89: read expected LONGs
Cog0    Sub-Test Results: count=2_013, Pass: 2_013, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #90: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #91: BAD: read one more LONG than written
Cog0     ECode: E_END_OF_FILE: no more data available, at end of file
Cog0     -> pass
Cog0
Cog0  * Test #92: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: Various odd size reads for Issue (#2)
Cog0
Cog0  * Test #93: Determine size of file in bytes
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0  * working with 8_052 byte file
Cog0
Cog0  * Test #94: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #95: read 20 N-length groups of bytes
Cog0    -- Read #1 27 byte(s) - pass
Cog0    -- Read #2 29 byte(s) - pass
Cog0    -- Read #3 2 byte(s) - pass
Cog0    -- Read #4 9 byte(s) - pass
Cog0    -- Read #5 7 byte(s) - pass
Cog0    -- Read #6 30 byte(s) - pass
Cog0    -- Read #7 24 byte(s) - pass
Cog0    -- Read #8 6 byte(s) - pass
Cog0    -- Read #9 16 byte(s) - pass
Cog0    -- Read #10 28 byte(s) - pass
Cog0    -- Read #11 22 byte(s) - pass
Cog0    -- Read #12 3 byte(s) - pass
Cog0    -- Read #13 22 byte(s) - pass
Cog0    -- Read #14 12 byte(s) - pass
Cog0    -- Read #15 15 byte(s) - pass
Cog0    -- Read #16 29 byte(s) - pass
Cog0    -- Read #17 25 byte(s) - pass
Cog0    -- Read #18 27 byte(s) - pass
Cog0    -- Read #19 24 byte(s) - pass
Cog0    -- Read #20 6 byte(s) - pass
Cog0    Sub-Test Results: count=20, Pass: 20, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #96: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #97: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 10, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0  rw9words.bin, byteCount = 18, blockID = 2, BlocksUsed = 1, @Buff={binary data}
Cog0  rw12longs.bin, byteCount = 48, blockID = 3, BlocksUsed = 1, @Buff={binary data}
Cog0  rw10strings.zstr, byteCount = 144, blockID = 4, BlocksUsed = 1, @Buff={binary data}
Cog0  fullHeadLongs.bin, byteCount = 3_956, blockID = 5, BlocksUsed = 1, @Buff={binary data}
Cog0  moreThanHeadLongs.bin, byteCount = 3_964, blockID = 6, BlocksUsed = 2, @Buff={binary data}
Cog0  moreThanHeadBodyLongs.bin, byteCount = 8_052, blockID = 8, BlocksUsed = 3, @Buff={binary data}
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: unmount(), mount() - ensure files survive
Cog0
Cog0  * Test #98: unmount()
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #99: serial_number()  while FS not mounted
Cog0    Sub-Test Results: count=1, Pass: 1, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #100: serial_number() valid not mounted status
Cog0     ECode: E_NOT_MOUNTED: Filesystem NOT yet accessible
Cog0     -> pass
Cog0
Cog0  * Test #101: open()  while FS not mounted
Cog0     ECode: E_NOT_MOUNTED: Filesystem NOT yet accessible
Cog0     -> pass
Cog0
Cog0  * Test #102: mount() FS
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: CF1 - create 4kb file filled with 0x00
Cog0
Cog0  * Test #103: create zero filled file
Cog0  - program_block() block_address = $0A93
Cog0  - program_block() block_address = $0699
Cog0  - activate_block() block_address = $0699
Cog0  - activate_block() block_address = $0A93
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #104: Does file exist
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #105: Ensure expected file stats
Cog0    File: [cf1-create4Kbfill00.bin]
Cog0    # 2 Blocks in file:
Cog0      1: [$0A93] HEAD/more, thisID=10, dataOfs=0, nextId=11, lifeCycle [ACTIVE-3], sig=[$00B0_0A7D]
Cog0      2: [$0699] BODY/last, thisID=11, endPtr=$0090, lifeCycle [ACTIVE-3], sig=[$0900_0B7E]
Cog0    # blocks: 2
Cog0    # bytes used: 4_096
Cog0     -> pass
Cog0
Cog0  * Test #106: Is correct size
Cog0    file_size(): 4_096
Cog0     -> pass
Cog0
Cog0  * Test #107: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #108: read expected N BYTEs
Cog0    Sub-Test Results: count=4_096, Pass: 4_096, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #109: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #110: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0
Cog0   ------------------------------------------------------------
Cog0  * Test Group: CF2 - create 2kb file filled with 0xA5
Cog0
Cog0  * Test #111: create zero filled file
Cog0  - program_block() block_address = $04E7
Cog0  - activate_block() block_address = $04E7
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #112: Does file exist
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #113: Ensure expected file stats
Cog0    File: [cf2-create2KbfillA5.bin]
Cog0    # 1 Blocks in file:
Cog0      1: [$04E7] HEAD/last, thisID=12, dataOfs=$0000, endPtr=$0888, lifeCycle [ACTIVE-3], sig=[$8880_0C7C]
Cog0    # blocks: 1
Cog0    # bytes used: 2_048
Cog0     -> pass
Cog0
Cog0  * Test #114: Is correct size
Cog0    file_size(): 2_048
Cog0     -> pass
Cog0
Cog0  * Test #115: Open File for read
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #116: read expected N BYTEs
Cog0    Sub-Test Results: count=2_048, Pass: 2_048, Fail: 0
Cog0     -> pass
Cog0
Cog0  * Test #117: ensure no errors on reads
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0  * Test #118: Close read file
Cog0     ECode: SUCCESS: No error
Cog0     -> pass
Cog0
Cog0    All Files:
Cog0  rw10bytes.bin, byteCount = 10, blockID = 1, BlocksUsed = 1, @Buff={binary data}
Cog0  rw9words.bin, byteCount = 18, blockID = 2, BlocksUsed = 1, @Buff={binary data}
Cog0  rw12longs.bin, byteCount = 48, blockID = 3, BlocksUsed = 1, @Buff={binary data}
Cog0  rw10strings.zstr, byteCount = 144, blockID = 4, BlocksUsed = 1, @Buff={binary data}
Cog0  fullHeadLongs.bin, byteCount = 3_956, blockID = 5, BlocksUsed = 1, @Buff={binary data}
Cog0  moreThanHeadLongs.bin, byteCount = 3_964, blockID = 6, BlocksUsed = 2, @Buff={binary data}
Cog0  moreThanHeadBodyLongs.bin, byteCount = 8_052, blockID = 8, BlocksUsed = 3, @Buff={binary data}
Cog0  cf1-create4Kbfill00.bin, byteCount = 4_096, blockID = 11, BlocksUsed = 2, @Buff={binary data}
Cog0  cf2-create2KbfillA5.bin, byteCount = 2_048, blockID = 13, BlocksUsed = 1, @Buff={binary data}
Cog0
Cog0  * 118 Tests - Pass: 118, Fail: 0
Cog0  * Test Complete
